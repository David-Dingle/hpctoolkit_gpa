default_language_version:
  python: python3

# NB: The hooks in this file are listed in a particular order to reduce the number of times
# pre-commit has to run before getting an all-clear.

repos:
# ------------------------------------------------------------------------------------
#  Automation hooks:  Hooks that can alter the semantics of files
# ------------------------------------------------------------------------------------

- repo: https://github.com/asottile/pyupgrade
  rev: v3.9.0
  hooks:
  # Automatically elide older Python syntax and replace with newer ones
  - id: pyupgrade
    args: [--py310-plus]
    # XXX: Old Python 2.7-compatible script. Probably bitrot by now.
    exclude: '^src/tool/hpcrun/sample-sources/make-wrappers.py$'

- repo: https://github.com/charliermarsh/ruff-pre-commit
  rev: 'v0.0.278'
  hooks:
  # Run a number of Python linters in Rust. Not completely feature-parity with Python-based linters,
  # but can autofix a number of issues before they run. Also wicked fast.
  - id: ruff
    args: [--target-version=py310, --fix, --line-length=100]
    exclude: &py_excludes |
      (?x)(
        ^src/tool/hpcrun/sample-sources/make-wrappers\.py$    # XXX: Old bitrotted Py <2.7 script
      )

- repo: https://github.com/python-poetry/poetry
  rev: '1.5.0'
  hooks:
  # Ensure the poetry.lock files are in-sync with the pyproject.toml files
  - id: poetry-lock
    args: [-C, tests2/lib/python/, --check]
  - id: poetry-lock
    args: [-C, lib/dev/, --check]


# ------------------------------------------------------------------------------------
#  Formatting hooks:  Hooks that alter the syntax but not semantics of files
# ------------------------------------------------------------------------------------

- repo: https://github.com/psf/black
  rev: '23.7.0'
  hooks:
  # Blacken all Python code, except allow slightly longer line lengths
  - id: black
    args: ['--line-length=100', '--target-version=py310']

- repo: https://github.com/PyCQA/isort
  rev: 5.12.0
  hooks:
  # Sort imports in all the Python code
  - id: isort
    args: [--profile, black, --line-length=100]

- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.4.0
  hooks:
  # Prettify JSON files so they look consistent
  - id: pretty-format-json
    args: [--autofix, --no-sort-keys]
  # Remove trailing whitespace
  - id: trailing-whitespace
    exclude: &generated_text |
      (?x)^(
        configure | (.*/|)Makefile\.in |    # Autogoo has tons of trailing whitespace
        src/extern/valgrind/[^/]+\.h |    # External Valgrind headers
        # All of the below files are generated by the build system (sometimes)
        README.Install |
        spack/spack-issues\.txt |
        doc/www/documentation\.html |
        doc/www/download\.html |
        doc/www/examples\.html |
        doc/www/index\.html |
        doc/www/info-acks\.html |
        doc/www/info-people\.html |
        doc/www/overview\.html |
        doc/www/publications\.html |
        doc/www/software\.html |
        doc/www/software-instructions\.html |
        doc/www/spack-issues\.html |
        doc/www/training\.html |
        doc/www/publications\.html |
      )$
  # All files must end in a single newline (or be perfectly empty)
  - id: end-of-file-fixer
    exclude: *generated_text
  # Remove the UTF8 BOM from the start of any files
  - id: fix-byte-order-marker
  # Ensure files have consistent endings. (This operates in the worktree, Git also normalizes the index)
  - id: mixed-line-ending


# ------------------------------------------------------------------------------------
#  Linting hooks:  Hooks that do not alter files but checks that they satisfy various conditions
# ------------------------------------------------------------------------------------

- repo: meta
  hooks:
  # Check that hooks listed actually do something
  - id: check-hooks-apply
  # Check that any excludes do indeed exclude something
  - id: check-useless-excludes

- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.4.0
  hooks:
  # Ensure all executable scripts have a shebang
  - id: check-executables-have-shebangs
  # Ensure large files (>=500KB) are never added outside of LFS
  - id: check-added-large-files
  # Ensure symlinks always point to something
  - id: check-symlinks
  # Warn if symlinks are ever accidentally destroyed
  - id: destroyed-symlinks
  # Ensure conflict markers are never committed anywhere
  - id: check-merge-conflict
  # Ensure files do not differ only in case (problematic on some filesystems)
  - id: check-case-conflict
  # Reminder to always work in a branch separate from the main two
  - id: no-commit-to-branch
    args: [--branch, master, --branch, develop]

- repo: https://github.com/python-poetry/poetry
  rev: '1.5.0'
  hooks:
  # Ensure the pyproject.toml files are valid for Poetry
  - id: poetry-check
    args: [-C, tests2/lib/python/]
    files: ^tests2/lib/python/pyproject\.toml$
  - id: poetry-check
    args: [-C, lib/dev/]
    files: ^lib/dev/pyproject\.toml$

- repo: https://github.com/pre-commit/mirrors-mypy
  rev: v1.4.1
  hooks:
 # Run static checks on the Python code
  - id: mypy
    # NB: The MyPy cache needs to be disabled (--no-incremental) to dodge
    # https://github.com/python/mypy/issues/12664 which affects ruamel.yaml
    args: [--scripts-are-modules, --no-incremental, --show-column-numbers, --pretty]
    additional_dependencies:
    - pytest >=7.3.2, <8
    - ruamel.yaml >=0.17.16, <0.18
    - click >=8.1.5, <9
    - pyparsing >=3.0.9, <4
    - pyelftools >=0.29, <0.30
    - spiqa @ https://gitlab.com/hpctoolkit/spiqa/-/package_files/89718791/download  # 0.3.0
    - types-jsonschema
    exclude: *py_excludes

- repo: https://github.com/PyCQA/pylint
  rev: v2.17.4
  hooks:
  # Run the aggressive static Python linter
  - id: pylint
    additional_dependencies:
    - ruamel.yaml >=0.17.32, <0.18
    - spiqa @ https://gitlab.com/hpctoolkit/spiqa/-/package_files/89718791/download  # 0.3.0
    - pylint-pytest
    exclude: *py_excludes

- repo: https://github.com/shellcheck-py/shellcheck-py
  rev: v0.9.0.5
  hooks:
  # Find common errors in shell scripts using shellcheck
  - id: shellcheck
    # Exclude Autotools files, they don't pass shellcheck (which is a really bad sign!)
    exclude: '^(configure$|config/)'
  - id: shellcheck
    # These files get injected into the launch scripts manually with a lot of context, so we have
    # to give it a few extra arguments to get these through.
    files: '^config/(copyright-hash|export-hpctoolkit|launch-options)$'
    types: [file]
    args: ['--shell=sh', '--exclude=SC2154']

- repo: https://github.com/python-jsonschema/check-jsonschema
  rev: '0.23.3'
  hooks:
  # Validate the schemas based on their metaschemas
  - id: check-metaschema
    files: \.schema\.json$
  # Validate the GitLab CI scripts against the schema. Doesn't catch everything but helps
  - id: check-gitlab-ci

- repo: https://github.com/codespell-project/codespell
  rev: v2.2.5
  hooks:
  # Identify common spelling mistakes in code and comments
  - id: codespell
    args: ['--config', '.codespellrc']
    exclude: |
      (?x)^(
        config/(ltmain\.sh|depcomp|config\.guess|config\.sub|libtool\.m4) |    # Autotools files with code misspellings
        configure |
        lib/dtd/mathml/.*\.ent |    # MathML follows LaTeX's habit of funny names for math symbols
        tools/latex2man/.* |    # External code
        src/extern/valgrind/[^/]+\.h |    # External Valgrind headers
      )$

- repo: https://github.com/Yelp/detect-secrets
  rev: v1.4.0
  hooks:
  # Scan for secrets that should never appear in the repo itself
  - id: detect-secrets
    exclude: |
      (?x)^(
        configure |    # Some of the tight M4 looks like secret keywords
        doc/www/software-instructions.html    # Some of the tags in here are high-entropy
      )$
