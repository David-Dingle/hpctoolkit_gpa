# Only spawn workflows for MRs or protected branches
workflow:
  rules:
  - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"'
    when: never
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED != "true"
    when: never
  - when: always


stages:
- deps:generate
- deps:concretize
- deps:prep
- deps:build
- deps:package
- deps
- validate
- manual
- test
- lint


include:
# Jobs for building all the dependencies with Spack
- local: ci/dependencies/.gitlab-ci.yml
# Jobs for constructing the container images used in CI
- local: ci/containers/.gitlab-ci.yml


variables:
  # Most jobs don't needs submodules, those that do will override this.
  GIT_SUBMODULE_STRATEGY: none

  # Add a transfer progress bar for artifacts
  TRANSFER_METER_FREQUENCY: 2s

  # Use fastzip to package caches and artifacts
  FF_USE_FASTZIP: 'true'
  ARTIFACT_COMPRESSION_LEVEL: default
  CACHE_COMPRESSION_LEVEL: fastest

  # Retry various preliminary job stages (network errors)
  GET_SOURCES_ATTEMPTS: 3
  ARTIFACTS_DOWNLOAD_ATTEMPTS: 3
  EXECUTOR_JOB_SECTION_ATTEMPTS: 3


default:
  # Most jobs can be interrupted and should be retried if failed for mysterious reasons
  interruptible: true
  retry:
    max: 2
    when:
    - unknown_failure
    - api_failure
    - stuck_or_timeout_failure
    - runner_system_failure


# Many jobs need a working copy of the ./dev scriptsuite. This job handles setting it up.
.dev job:
  extends: .image job
  before_script:
  - /opt/dev_venv/bin/python3 -m pip install --require-virtualenv lib/dev/
  - export PATH=/opt/dev_venv/bin/:"$PATH"


# Pre-commit linting passes must pass for the pipeline to succeed
precommit:
  stage: lint
  image: docker.io/python:3.10-bullseye
  needs: []
  before_script:
  - python3 -m pip install pre-commit
  script:
  - pre-commit run --all-files --show-diff-on-failure


# Check that the Spack recipe for @develop is sufficiently up-to-date to compile this branch.
# Failures are allowed so that if the dependencies or build flags shift, we are made aware (by a
# big orange exclaimation point) but not blocked by upstream Spack.
'spack install: [amd64]':
  extends: .image job amd64
  tags: [saas-linux-small-amd64]
  stage: lint
  variables:
    OS_BASE: ubuntu20.04
  allow_failure: true
  cache:
    key: spack
    when: always
    paths: [.spack.git]
  script:
  # Instantiate a fresh Spack develop (instead of whatever is burned into the image)
  - |
    if [ ! -d .spack.git ]; then
      git clone --depth=30 --single-branch --no-tags --branch=develop --bare \
        https://github.com/spack/spack.git .spack.git || exit $?
    fi
  - git -C .spack.git fetch --verbose origin +develop:develop
  - git clone --shared --branch=develop .spack.git .spack
  - export PATH="$(realpath .spack)"/bin:"$PATH"
  # Spack out a representative HPCToolkit. All dependencies should already be built.
  # TODO: Expand this list a bit sometime to better represent what we want to ensure works
  - HPCTOOLKIT="hpctoolkit @git.${CI_MERGE_REQUEST_SOURCE_BRANCH_SHA:-${CI_COMMIT_SHA}}=develop"
  - >-
    eatmydata spack install --fail-fast
    "$HPCTOOLKIT ~viewer ~mpi ~debug +papi +opencl ~cuda ~rocm ~level_zero"
    "$HPCTOOLKIT ~viewer ~mpi ~debug ~papi +opencl ~cuda ~rocm ~level_zero"


# The two devenvs must be consistent with the current version of the ./dev scriptsuite.
deps check:
  extends: [.image job amd64, .dev job]
  tags: [saas-linux-small-amd64]
  stage: validate
  variables:
    OS_BASE: ubuntu20.04
  script:
  - dev env -d /spack/cenv/latest echo OK
  - dev env -d /spack/cenv/minimum echo OK


# The Autogoo for the HEAD commit (at least) must be in-sync before we build
autoreconf:
  extends: [.image job amd64, .dev job]
  tags: [saas-linux-small-amd64]
  stage: validate
  variables:
    OS_BASE: ubuntu20.04
  script:
  - dev autogen --custom-env /spack/cenv/_autogen --skip-install
  - git status --porcelain=v1 --untracked-files=no > changes || exit $?
  - |
    if test -s changes; then
      echo "== CHANGES DETECTED, running git diff..."
      git diff | tee fixup.patch
      echo "== AUTOGOO OUT-OF-SYNC, see patch above and in fixup.patch for details"
      exit 1
    fi
  artifacts:
    when: always
    paths:
    - fixup.patch


# Allow manually triggering a child pipeline to regenerate the test data
regen testdata:
  rules: !reference [.image job, rules]
  stage: manual
  when: manual
  allow_failure: true
  trigger:
    include:
    - local: tests2/data/.gitlab-ci.yml
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    GIT_SUBMODULE_STRATEGY: recursive


# Build jobs require a working Spack and compilers and a few other bits. This job handles that setup.
.build job:
  extends: .dev job
  cache:
  - key: ccache-$CI_JOB_NAME
    when: always
    paths:
    - .ccache/

  needs:
  - job: deps check
    artifacts: false
  - job: autoreconf
    artifacts: false

  variables:
    CCACHE_DIR: '$CI_PROJECT_DIR/.ccache'
    CCACHE_BASEDIR: '$CI_PROJECT_DIR'
    CCACHE_NOCOMPRESS: 'true'
    CCACHE_MAXSIZE: '5G'
    CCACHE_MAXFILES: '0'

.build job amd64:
  extends: [.image job amd64, .build job]
  needs: [!reference [.image job amd64, needs], !reference [.build job, needs]]
.build job arm64:
  extends: [.image job arm64, .build job]
  needs: [!reference [.image job arm64, needs], !reference [.build job, needs]]


# Build many versions of the codebase, to ensure all the various compilations work
# As a general rule, we sweep the most-likely-to-fail configurations by turning off a single variant
# at a time. With the exception of +debug, which is flipped at will.
.buildmany:
  stage: test
  variables:
    CENV: latest
  script:
  # Run the build script for a wide sweep of configurations. Use some Python to help.
  - rm -rf logs/
  - >-
    eatmydata dev buildfe -d /spack/cenv/latest --
    -l "logs/$CI_JOB_NAME/$CENV" -c "$JOB_CC" -a check-install
    --ccache-stats --fail-fast --reproducible $OS_BUILDFE_ARGS -s "$SPEC"

  after_script:
  - ./ci/scripts/merge-cq cq.json logs/**/*.cq.json

  artifacts:
    reports:
      codequality: cq.json
    paths:
    - logs/
    when: always

'buildmany: [amd64]':
  extends: [.build job amd64, .buildmany]
  tags: [saas-linux-small-amd64]
  parallel:
    matrix:
    - OS_BASE: almalinux8
      JOB_CC: gcc=8

    - OS_BASE: leap15
      JOB_CC: gcc-11

    - OS_BASE: ubuntu20.04
      JOB_CC: [gcc-9, gcc-10, clang-10]

    - OS_BASE: fedora37
      JOB_CC: [gcc=12, clang=15]
  variables:
    SPEC: '~cuda ~rocm ~level0 !debug (tests2 mpi papi opencl python valgrind_debug)[~<1]'
'buildmany min: [amd64]':
  extends: 'buildmany: [amd64]'
  variables:
    CENV: minimum
'buildmany: [arm64]':
  extends: [.build job arm64, .buildmany]
  tags: [rice-linux-small-arm64]
  parallel:
    matrix:
    - OS_BASE: ubuntu20.04
      JOB_CC: [gcc-10]
  variables:
    SPEC: '~cuda ~rocm ~level0 +debug +valgrind_debug +tests2 (mpi papi opencl python)[~<1]'
'buildmany min: [arm64]':
  extends: 'buildmany: [arm64]'
  variables:
    CENV: minimum

'buildmany: [amd64, +cuda]':
  extends: [.build job amd64, .buildmany]
  tags: [saas-linux-small-amd64]
  parallel:
    matrix:
    - CUDA: ['11.8.0', '12.0.1']
  variables:
    OS_BASE: ubuntu20.04
    OS_EXT: -cuda$CUDA
    OS_BUILDFE_ARGS: '-C--with-cuda=/usr/local/cuda'
    JOB_CC: gcc-9
    SPEC: '+cuda ~rocm ~level0 !debug +tests2 (mpi papi opencl python valgrind_debug)[~<1]'
'buildmany min: [amd64, +cuda]':
  extends: ['buildmany: [amd64, +cuda]']
  variables:
    CENV: minimum
'buildmany: [amd64, +cuda]: [10.2]':
  extends: [.build job amd64, .buildmany]
  tags: [saas-linux-small-amd64]
  variables:
    OS_BASE: almalinux8
    OS_EXT: -cuda10.2
    OS_BUILDFE_ARGS: '-C--with-cuda=/usr/local/cuda'
    JOB_CC: gcc=8
    SPEC: '+cuda ~rocm ~level0 !debug ~tests2 (mpi papi opencl python valgrind_debug)[~<1]'
'buildmany min: [amd64, +cuda]: [10.2]':
  extends: ['buildmany: [amd64, +cuda]: [10.2]']
  variables:
    CENV: minimum

'buildmany: [amd64, +rocm]':
  extends: [.build job amd64, .buildmany]
  tags: [saas-linux-small-amd64]
  parallel:
    matrix:
    - ROCM: ['5.1.3', '5.2.3', '5.3.2', '5.4.2']
  variables:
    OS_BASE: ubuntu20.04
    OS_EXT: -rocm$ROCM
    OS_BUILDFE_ARGS: '-C--with-rocm=/opt/rocm'
    JOB_CC: gcc-9
    SPEC: '~cuda +rocm ~level0 !debug +tests2 (mpi papi opencl python valgrind_debug)[~<1]'
'buildmany min: [amd64, +rocm]':
  extends: ['buildmany: [amd64, +rocm]']
  variables:
    CENV: minimum

'buildmany: [amd64, +level0]':
  extends: [.build job amd64, .buildmany]
  tags: [saas-linux-small-amd64]
  parallel:
    matrix:
    - ONEAPI: ['2022.2', '2022.3.1', '2023.0.0']
      GTPIN: ['3.0', '3.2.2']
  variables:
    OS_BASE: ubuntu20.04
    OS_EXT: -lvlz$ONEAPI
    OS_BUILDFE_ARGS: '-C--with-level0=/usr -C--with-igc=/usr -C--with-gtpin=/opt/gtpin-$GTPIN/Profilers'
    JOB_CC: gcc-9
    SPEC: '~cuda ~rocm +level0 !debug +tests2 (mpi papi opencl python gtpin valgrind_debug)[~<1]'
'buildmany min: [amd64, +level0]':
  extends: ['buildmany: [amd64, +level0]']
  variables:
    CENV: minimum


# Build single versions of the codebase and run unit tests through `make check`
.check:
  stage: test
  variables:
    CENV: latest
    # Some of the test data is stored in a submodule
    GIT_SUBMODULE_STRATEGY: recursive
    # OpenMPI refuses to run as user 0 without these options set.
    OMPI_ALLOW_RUN_AS_ROOT: 1
    OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  script:
  - export MESON_TEST_OPTS="$MESON_TEST_OPTS $JOB_MESON_TEST_OPTS"
  - rm -rf logs/
  # For semifresh runs, regenerate some of the test data before testing. Use some Python to help.
  - >-
    test -z "$REGEN" ||
    eatmydata dev buildfe -d /spack/cenv/$CENV --
    -l "logs/$CI_JOB_NAME/regen" -c "$JOB_CC" ${REGEN}
    --ccache-stats --fail-fast --fresh-unpack --reproducible $OS_BUILDFE_ARGS -1 -s "$SPEC"
  # Run the test suite for the configuration of interest. Use some Python to help.
  - >-
    eatmydata dev buildfe -d /spack/cenv/$CENV --
    -l "logs/$CI_JOB_NAME" -c "$JOB_CC" -a test
    --ccache-stats --fail-fast --test-junit-copyout --reproducible $OS_BUILDFE_ARGS -1 -s "$SPEC"

  after_script:
  - ./ci/scripts/merge-cq cq.json logs/**/*.cq.json

  artifacts:
    reports:
      codequality: cq.json
      junit: '*.junit.xml'
    paths:
    - logs/
    when: always

# NB: We use --repeat in the check jobs to detect bugs that cause sporadic test failures.
# We chose --repeat 7, since this statistically provides:
#   - 99.2% confidence that this MR does not introduce a "blocking" bug that would prevent others'
#     work. We are very confident that a run will succeed >1/2 the time, and so require minimal
#     repeated commands to "push past" the issue. (`1 - pbinom(0, 7, 1 - 1/2) -> 0.992`)
#   - 79.0% confidence that this MR does not introduce a bug that would "annoy" others during their
#     work. We are modestly confident that a run will succeed >4/5 of the time, in which case the
#     bug may not be especially noticable. (`1 - pbinom(0, 7, 1 - 4/5) -> 0.790`)
#
# For the curious, the key formula to solve for the --repeat value is:
#     {# of repeats} > log(1 - {confidence}) / log({min prob of success})
# So a 99% confidence of 90% success rate requires a --repeat of at least 44.

'check amd64: [cpu]':
  extends: [.build job amd64, .check]
  tags: [saas-linux-large-amd64]
  variables:
    OS_BASE: ubuntu20.04
    JOB_CC: gcc-10
    SPEC: '+tests2 +mpi +debug +valgrind_debug +papi +python ~opencl ~cuda ~rocm ~level0'
    JOB_MESON_TEST_OPTS: '--maxfail 10 --repeat 7'
'check min amd64: [cpu]':
  extends: 'check amd64: [cpu]'
  variables:
    CENV: minimum
'check semifresh amd64: [cpu]':
  extends: 'check amd64: [cpu]'
  variables:
    REGEN: '-a fresh-testdata-none -a fresh-testdata-cpu'

'check arm64: [cpu]':
  extends: [.build job arm64, .check]
  tags: [rice-linux-small-arm64]
  variables:
    OS_BASE: ubuntu20.04
    JOB_CC: gcc-10
    SPEC: '+tests2 +mpi +debug +valgrind_debug +papi +python ~opencl ~cuda ~rocm ~level0'
    JOB_MESON_TEST_OPTS: '--maxfail 10'
'check min arm64: [cpu]':
  extends: 'check arm64: [cpu]'
  variables:
    CENV: minimum
'check semifresh arm64: [cpu]':
  extends: 'check arm64: [cpu]'
  variables:
    REGEN: '-a fresh-testdata-none -a fresh-testdata-cpu'

'check amd64: [+cuda, 11.6.2]':
  extends: [.build job amd64, .check]
  tags: [rice-linux-large-amd64+nvidia, gpu/nvidia/usrspace:11.6, gpu/nvidia>6.0]
  variables:
    OS_BASE: ubuntu20.04
    OS_EXT: -cuda11.6.2
    OS_BUILDFE_ARGS: '-C--with-cuda=/usr/local/cuda'
    JOB_CC: gcc-9
    SPEC: +tests2 +mpi +debug ~valgrind_debug +papi +python ~opencl +cuda ~rocm ~level0
    JOB_MESON_TEST_OPTS: '--maxfail 10 --repeat 7 --suite cuda'
'check min amd64: [+cuda, 11.6.2]':
  extends: 'check amd64: [+cuda, 11.6.2]'
  variables:
    CENV: minimum
'check semifresh amd64: [+cuda, 11.6.2]':
  extends: 'check amd64: [+cuda, 11.6.2]'
  variables:
    REGEN: '-a fresh-testdata-none -a fresh-testdata-cpu -a fresh-testdata-nvidia'

'check amd64: [+cuda, 11.8.0]':
  extends: [.build job amd64, .check]
  tags: [saas-linux-large-amd64]
  variables:
    OS_BASE: ubuntu20.04
    OS_EXT: -cuda11.8.0
    OS_BUILDFE_ARGS: '-C--with-cuda=/usr/local/cuda'
    JOB_CC: gcc-9
    SPEC: +tests2 +mpi +debug +valgrind_debug +papi +python ~opencl +cuda ~rocm ~level0
    NVIDIA_VISIBLE_DEVICES: ''  # Disallow GPU access
    JOB_MESON_TEST_OPTS: '--maxfail 10 --repeat 7'
'check min amd64: [+cuda, 11.8.0]':
  extends: 'check amd64: [+cuda, 11.8.0]'
  variables:
    CENV: minimum
'check semifresh amd64: [+cuda, 11.8.0]':
  extends: 'check amd64: [+cuda, 11.8.0]'
  variables:
    REGEN: '-a fresh-testdata-none -a fresh-testdata-cpu'

'check amd64: [+rocm]':
  extends: [.build job amd64, .check]
  tags: [rice-linux-large-amd64+amd, gpu/amd/usrspace:5.2]
  variables:
    OS_BASE: ubuntu20.04
    OS_EXT: -rocm5.2.3
    OS_BUILDFE_ARGS: '-C--with-rocm=/opt/rocm'
    JOB_CC: gcc-9
    SPEC: +tests2 +mpi +debug +valgrind_debug +papi +python ~opencl ~cuda +rocm ~level0
    JOB_MESON_TEST_OPTS: '--maxfail 10 --repeat 7 --suite rocm'
'check min amd64: [+rocm]':
  extends: 'check amd64: [+rocm]'
  variables:
    CENV: minimum
'check semifresh amd64: [+rocm]':
  extends: 'check amd64: [+rocm]'
  variables:
    REGEN: '-a fresh-testdata-none -a fresh-testdata-cpu -a fresh-testdata-amd'
