# Read https://mesonbuild.com/Machine-files.html for an in-depth description of
# the syntax and sections of this file.

[properties]
# Path to the install prefix for Boost (aka libboost)
# prefix_boost = '/…/boost/install/'

# Path to the install prefix for Bzip2 (aka libbz2)
# prefix_bzip = '/…/bzip2/install/'

# Path to the install prefix for Dyninst
# prefix_dyninst = '/…/dyninst/install/'

# Path to the install prefix for Elfutils (aka libelf and libdw)
# prefix_elfutils = '/…/elfutils/install/'

# Path to the install prefix for TBB (aka libtbb)
# prefix_tbb = '/…/tbb/install/'

# Path to the install prefix for libmonitor (https://github.com/hpctoolkit/libmonitor)
# prefix_libmonitor = '/…/libmonitor/install/'

# Path to the install prefix for libunwind
# prefix_libunwind = '/…/libunwind/install/'

# Path to the install prefix for Xerces (aka libxerces-c)
# prefix_xerces = '/…/xerces-c/install/'

# Path to the install prefix for liblzma (aka xz)
# prefix_lzma = '/…/xz/install/'

# Path to the install prefix for zlib (aka libz)
# prefix_zlib = '/…/zlib/install/'

# Path to the install prefix for libiberty
# prefix_libiberty = '/…/libiberty/install/'

# Path to the install prefix for Intel's XED (https://github.com/intelxed/xed)
# prefix_xed = '/…/xed/install/'

# Path to the install prefix for YAML-CPP (aka libyaml-cpp)
# prefix_yaml_cpp = '/…/yaml-cpp/install/'

# Path to the install prefix for Perfmon (aka libpfm4)
# prefix_perfmon = '/…/perfmon/install/'

# Path to the install prefix for PAPI (aka libpapi)
# prefix_papi = '/…/papi/install/'

# Path to the install prefix for OpenCL (headers)
# prefix_opencl = '/…/opencl-headers/install/'

# Path to the install prefix for Nvidia CUDA (https://developer.nvidia.com/cuda-toolkit)
# prefix_cuda = '/usr/local/cuda'

# Path to the install prefix for ROCm HIP (https://github.com/ROCm-Developer-Tools/HIP)
# prefix_rocm_hip = '/opt/rocm-5.4.3/'

# Path to the install prefix for ROCm runtime (https://github.com/RadeonOpenCompute/ROCR-Runtime)
# prefix_rocm_hsa = '/opt/rocm-5.4.3/'

# Path to the install prefix for ROCm ROCTracer (https://github.com/ROCm-Developer-Tools/roctracer)
# prefix_rocm_tracer = '/opt/rocm-5.4.3/'

# Path to the install prefix for ROCm ROCProfiler (https://github.com/ROCm-Developer-Tools/rocprofiler)
# prefix_rocm_profiler = '/opt/rocm-5.4.3/'

# Path to the install prefix for Intel GTPin.
# This is only available in binary tarballs from https://www.intel.com/content/www/us/en/developer/articles/tool/gtpin.html,
# and this path needs to be the `Profilers/` subdirectory in that tarball.
# prefix_gtpin = '/…/path/to/gtpin/Profilers/'

# Path to the install prefix for Intel IGC (https://github.com/intel/intel-graphics-compiler)
# prefix_igc = '/usr'

# Path to the install prefix for Level 0 (part of https://www.oneapi.io/)
# prefix_level0 = '/usr'

[built-in options]
# NOTE: These options can also be configured for an individual build directory
# by passing `meson (setup|configure) -D<key>=<value>` flags to Meson. The
# syntax differs slightly in that case, quotes ('') and brackets ([]) are not
# used on the command line.
#
# Due to a Meson bug (https://github.com/mesonbuild/meson/issues/11930), it is
# highly recommended to use either `-D` flags or this section BUT NOT BOTH.

# The libraries for all dependencies given by install prefixes in the above
# section need to be made available at runtime. One convenient way to do this
# is to add rpaths to the binaries for any custom install prefixes:
# c_link_args = [
#   '-Wl,-rpath=/…/boost/install/lib/',
#   '-Wl,-rpath=/…/bzip2/install/lib/',
#   '-Wl,-rpath=/…/dyninst/install/lib/',
#   '-Wl,-rpath=/…/elfutils/install/lib/',
#   '-Wl,-rpath=/…/tbb/install/lib/',
#   '-Wl,-rpath=/…/libmonitor/install/lib/',
#   '-Wl,-rpath=/…/libunwind/install/lib/',
#   '-Wl,-rpath=/…/xerces-c/install/lib/',
#   '-Wl,-rpath=/…/xz/install/lib/',
#   '-Wl,-rpath=/…/zlib/install/lib/',
#   '-Wl,-rpath=/…/libiberty/install/lib/',
#   '-Wl,-rpath=/…/xed/install/lib/',
#   '-Wl,-rpath=/…/yaml-cpp/install/lib/',
#   '-Wl,-rpath=/…/perfmon/install/lib/',
#   '-Wl,-rpath=/…/papi/install/lib/',
#   '-Wl,-rpath=/…/opencl-headers/install/lib/',
#   '-Wl,-rpath=/usr/local/cuda/lib/',
#   '-Wl,-rpath=/opt/rocm-5.4.3/lib/',
#   '-Wl,-rpath=/…/path/to/gtpin/Profilers/Lib/',
#   # '-Wl,-rpath=/usr/lib',
#   ]
# cpp_link_args = ...  # Same as above

[binaries]
# NOTE: In this section, all values refer to an executable installed by a
# dependency, NOT the install prefix of the dependency package.
# For example, do this:
#     python = '/opt/python-3.12/bin/python'
# Not this:
#     python = '/opt/python-3.12/'
#
# NOTE: In this section, the command to run can be specified in multiple ways
# and is perfectly valid. Acceptable syntaxes are an absolute path:
#     python = '/opt/python-3.12/bin/python'
# The name of a binary on the PATH:
#     python = 'python3.12'
# Or a list with wrapper commands and/or initial arguments:
#     python = ['python3.12', '-O']
#     python = ['time', '/usr/bin/python3.12', '-O']
# The examples below only show the most common syntaxes, but any of the syntaxes
# listed above will work for any option in this section.

# Spack executable
# spack = '/…/path/to/spack/bin/spack'

# C compiler
# c = 'gcc-9'
# c = '/usr/bin/gcc'
# c = ['ccache', '/usr/bin/gcc']

# C++ compiler
# cxx = 'g++-9'
# cxx = '/usr/bin/gcc'
# cxx = ['ccache', '/usr/bin/gcc']

# CUDA compiler (nvcc)
# cuda = 'nvcc'
# cuda = '/usr/local/cuda-11.7/bin/nvcc'
# cuda = ['ccache', '/usr/local/cuda-11.7/bin/nvcc']

# MPI C++ compiler
# mpicxx = '/…/path/to/mpi/bin/mpicxx'

# Python
# python = '/…/path/to/python/bin/python'

# Autotools
# autoreconf = '/…/path/to/autoconf/bin/autoreconf'
# autoconf = '/…/path/to/autoconf/bin/autoconf'
# aclocal = '/…/path/to/automake/bin/aclocal'
# autoheader = '/…/path/to/autoconf/bin/autoheader'
# autom4te = '/…/path/to/autoconf/bin/autom4te'
# automake= '/…/path/to/automake/bin/automake'
# libtoolize = '/…/path/to/libtool/bin/libtoolize'
# m4 = '/…/path/to/m4/bin/m4'

# GNU Make
# make = '/…/path/to/make/bin/make'
