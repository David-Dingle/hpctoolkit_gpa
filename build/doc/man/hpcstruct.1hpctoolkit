'\" t
.\" Manual page created with latex2man on Thu May 30 10:13:36 AM PDT 2024
.\" NOTE: This file is generated, DO NOT EDIT.
.de Vb
.ft CW
.nf
..
.de Ve
.ft R

.fi
..
.TH "HPCSTRUCT" "1" "2020/07/15" "The HPCToolkit Performance Tools " "The HPCToolkit Performance Tools "
.SH NAME

.PP
hpcstruct
\- recovers the static program structure of a CPU or GPU binary, including procedures, inlined functions, loops, and source lines 
.PP
See \fIhpctoolkit\fP(1)
for an overview of \fBHPCToolkit\fP\&.
.PP
.SH SYNOPSIS

.PP
hpcstruct
[\fBoptions\fP]
\fIbinary\fP
.PP
hpcstruct
[\fBoptions\fP]
\fImeasurement directory of GPU\-accelerated application\fP
.PP
.SH DESCRIPTION

.PP
Given an application binary, a shared library, or a GPU binary, hpcstruct
recovers the program structure of its object code by analyzing available information 
about loop nests, inlined functions, and the mapping between machine instructions and 
source lines. Program structure is a 
mapping of a program\&'s object code to its static source\-level structure. 
.PP
When analyzing a CPU binary \fIb\fP,
by default, 
hpcstruct
writes its results to the file \&'basename(\fIb\fP).hpcstruct\&'\&.
To improve attribution of performance measurements to program source code, one can 
pass one or more program structure files (e.g., for an executable and/or 
one or more shared libraries) to HPCToolkit\&'s analysis tool hpcprof
along with one or more HPCToolkit performance measurement directories. 
.PP
During execution of a GPU\-accelerated application on an NVIDIA GPU, HPCToolkit 
records NVIDIA \&'cubin\&' GPU binaries in the application\&'s measurement directory. 
To attribute performance to GPU functions in a GPU\-accelerated application, one 
should apply hpcstruct
to the application\&'s HPCToolkit measurement directory to 
analyze all GPU binaries recorded within. When analyzing a measurement directory 
that includes GPU binaries, any program structure files produced will be recorded 
inside the measurement directory. When hpcprof
is applied to a measurement 
directory that contains program structure files for GPU binaries, these program 
structure files will be used to help attribute any GPU performance measurements. 
.PP
hpcstruct
is designed primarily for highly optimized binaries created from 
C, C++, Fortran, and CUDA source code. Because hpcstruct\&'s
algorithms exploit a 
binary\&'s debugging information, for best results, binary should be compiled 
with standard debugging information or, at a minimum, line map information. 
Note: although a CPU or GPU binary may be optimized, it must also be 
compiled with line mappings for the results to be useful, e.g., normally using the \-g 
flag when compiling CPU binaries. 
.PP
For faster analysis of large binaries or many GPU binaries, we recommend using 
the \-j option to employ multithreading. As many as 32 cores can be used profitably 
to analyze large CPU or GPU binaries in the measurements directory for a 
GPU\-accelerated application. 
.PP
.SH ARGUMENTS

.PP
.TP
\fIbinary\fP
 File containing an executable or dynamically\-linked shared library. 
Note that hpcstruct
does not recover program structure for libraries that \fIbinary\fP
depends on. 
To recover that structure, run hpcstruct
on each dynamically\-linked shared library 
or relink your program with static versions of the libraries. 
.PP
.TP
\fImeasurement directory of GPU\-accelerated application\fP
 A measurement directory of a GPU\-accelerated application that employed NVIDIA GPUs. 
When a GPU\-accelerated application runs on an NVIDIA GPU, its \&'cubin\&' GPU binaries are recorded into 
HPCToolkit\&'s measurement directory. 
Applying hpcstruct
to a measurement directory analyzes any GPU binaries recorded 
in the measurement directory during execution. 
.PP
Default values for an option\&'s optional arguments are shown in {}\&. 
.PP
.SS OPTIONS: INFORMATIONAL
.PP
.TP
\fB\-V\fP, \fB\-\-version\fP
 Print version information. 
.PP
.TP
\fB\-h\fP, \fB\-\-help\fP
 Print help message. 
.PP
.SS OPTIONS: PARALLEL USAGE
.TP
\fB\-j\fP \fInum\fP, \fB\-\-jobs\fP \fInum\fP
 Use \fInum\fP
threads for all phases in hpcstruct\&.
{1} 
.PP
.TP
\fB\-\-gpu\-size\fP \fIn\fP
 Size (bytes) of a GPU binary that will cause hpcstruct
to use \fInum\fP
threads to analyze a binary in parallel. 
GPU binaries with fewer than \fIn\fP
bytes will be analyzed 
concurrently, \fInum\fP
at a time. {100000000} 
.PP
.SS OPTIONS: STRUCTURE RECOVERY
.PP
.TP
\fB\-\-gpucfg\fP \fIyes/no\fP
 Compute loop nesting structure for GPU machine code. Currently, 
this applies only to NVIDIA CUDA binaries (cubins). Loop nesting 
structure is only useful with instruction\-level measurements 
collected using PC sampling. {no} 
.PP
.TP
\fB\-I\fP \fIpath\fP, \fB\-\-include\fP \fIpath\fP
 Use \fIpath\fP
when resolving source file names. 
This option is useful when a compiler records the same filename in different ways within the symbolic information. 
(Yes, this does happen.) 
For a recursive search, append a \&'+\&' after the last slash, e.g., /mypath/+\&.
This option may appear multiple times. 
.PP
.TP
\fB\-R\fP \fI\&'old\-path=new\-path\&'\fP, \fB\-\-replace\-path\fP \fI\&'old\-path=new\-path\&'\fP
 Replace instances of \fIold\-path\fP
with \fInew\-path\fP
in all paths with \fIold\-path\fP
is a prefix 
(e.g., a profile\&'s load map and source code). 
Use '\\' to escape instances of \&'=\&' within specified paths. 
This option may appear multiple times. 
.PP
Use this when a profile or executable references files that have been relocated, 
such as might occur with a file system change. 
.PP
.SS OPTIONS: OUTPUT
.PP
.TP
\fB\-o\fP \fIfile\fP, \fB\-\-output\fP \fIfile\fP
 Write results to \fIfile\fP\&.
{\fIbasename(binary)\fP\&.hpcstruct}
.PP
.SS OPTIONS FOR DEVELOPERS:
.PP
.TP
\fB\-\-jobs\-struct\fP \fInum\fP
 Use num threads for the program structure analysis phase of hpcstruct\&.
.PP
.TP
\fB\-\-jobs\-parse\fP \fInum\fP
 Use num threads for the parse phase of hpcstruct\&.
.PP
.TP
\fB\-\-jobs\-symtab\fP \fInum\fP
 Use num threads for the symbol table analysis phase of hpcstruct\&.
.PP
.TP
\fB\-\-show\-gaps\fP
 Developer option to 
write a text file describing all the "gaps" found by hpcstruct,
i.e. address regions not identified as belonging to a code or data segment 
by the ParseAPI parser used to analyze application executables. 
The file is named \fIoutfile\fP\&.gaps,
which by default is 
\fIappname\fP\&.hpcstruct.gaps\&.
.PP
.TP
\fB\-\-time\fP
 Display the time and space usage per phase in hpcstruct\&.
.PP
.SH EXAMPLES

.PP
.TP
1.
Assume we have used HPCToolkit to collect performance measurements for the (optimized) CPU binary 
sweep3d
and that performance measurement data for the application is in the measurement 
directory hpctoolkit\-sweep3d\-measurements\&.
Assume that sweep3d
was compiled with debugging information using the \-g compiler flag in addition to any 
optimization flags. 
We wish to recover program structure in sweep3d
for use with \fIhpcprof\fP(1)
\&.
To do this, execute: 
.PP
.Vb
    hpcstruct sweep3d
.Ve
.PP
By default, the output is placed in a file named sweep3d.hpcstruct\&.
.PP
To use the program structure file to help interpret performance measurements in hpctoolkit\-sweep3d\-measurements,
provide the program structure file to hpcprof
using the \-S option, as shown below: 
.PP
.Vb
    hpcprof \-S sweep3d.hpcstruct hpctoolkit\-sweep3d\-measurements
.Ve
.PP
Additional program structure files for any shared libraries used by sweep3d
can be passed to hpcprof
using additional \-S options. 
.PP
.TP
2.
Assume we have used HPCToolkit to collect performance measurements for the (optimized) GPU\-accelerated 
CPU binary laghos,
which offloaded computation onto one or more NVIDIA GPUs. 
Assume that performance measurement data for the application is in the measurement 
directory hpctoolkit\-laghos\-measurements\&.
.PP
Assume that the CPU code for laghos
was compiled with debugging information using the \-g compiler flag in addition to any 
optimization flags and that the GPU code the application contains was compiled with line map information (\-lineinfo). 
.PP
To recover program structure information for the laghost CPU binary, execute: 
.PP
.Vb
    hpcstruct laghos
.Ve
.PP
By default, the output is placed in a file named laghos.hpcstruct\&.
.PP
To recover program structure information for the GPU binaries used by laghos, execute: 
.PP
.Vb
    hpcstruct hpctoolkit\-laghos\-measurements
.Ve
.PP
The measurement directory will be augmented with program structure information recovered for the GPU binaries. 
.PP
As shown below, one can provide the program structure files to hpcprof
by passing the 
CPU program structure file explicitly using the \-S argument and passing the program structure files for the GPU binaries 
implicitly by passing the measurement directory. 
.PP
.Vb
    hpcprof \-S laghos.hpcstruct hpctoolkit\-laghos\-measurements
.Ve
.PP
.SH NOTES

.PP
.TP
1.
For best results, an application binary should be compiled with debugging information. 
To generate debugging information while also enabling optimizations, 
use the appropriate variant of \-g for the following compilers: 
.RS
.TP
.B *
GNU compilers: \-g 
.TP
.B *
Intel compilers: \-g \-debug inline_debug_info 
.TP
.B *
IBM compilers: \-g \-fstandalone\-debug \-qfulldebug \-qfullpath 
.TP
.B *
PGI compilers: \-gopt 
.TP
.B *
NVIDIA\&'s nvcc: 
.br 
    \-lineinfo provides line mappings for optimized or unoptimized code
.br
    \-G provides line mappings and inline information for unoptimized code 
.RE
.RS
.PP
.RE
.TP
2.
While hpcstruct attempts to guard against inaccurate debugging information,
some compilers (notably PGI\&'s) often generate invalid and inconsistent debugging information. 
Garbage in; garbage out. 
.PP
.TP
3.
C++ mangling is compiler specific. On non\-GNU platforms, hpcstruct
tries both platform\&'s and GNU\&'s demangler. 
.PP
.SH SEE ALSO

.PP
\fIhpctoolkit\fP(1)
\&.
.PP
.SH VERSION

.PP
Version: 2020.07-develop
.PP
.SH LICENSE AND COPYRIGHT

.PP
.TP
Copyright 
(C)2002\-2020, Rice University. 
.TP
License 
See README.License\&.
.PP
.SH AUTHORS

.PP
Rice University\&'s HPCToolkit Research Group 
.br
Email: \fBhpctoolkit\-forum =at= rice.edu\fP
.br
WWW: \fBhttp://hpctoolkit.org\fP\&.
.PP
.\" NOTE: This file is generated, DO NOT EDIT.
