ARG SPACKOS
ARG BASE
ARG TARGETOS
ARG TARGETARCH

# Preparation stage: Build all the dependencies with Spack
FROM ghcr.io/spack/$SPACKOS:0.21.0 as spackbuild

# Install all the packages we want, using the environment. We use an extra Makefile to add a
# post-install hook that pushes the resulting packages to various buildcaches.
COPY ci/spack-deps/spack.yaml ci/spack-deps/Makefile /opt/environment/
ARG VERMODE=latest
RUN --mount=type=secret,id=spack_mirrors,target=/root/.spack/mirrors.yaml \
    --mount=type=cache,target=/mnt/cache/spack-src,sharing=locked \
  export PATH=/opt/spack/bin:"$PATH" \
  && spack -D /opt/environment concretize \
  && spack -D /opt/environment env depfile --generator make --make-prefix predeps \
      -o /opt/environment/spack.mk \
  && make -j$(nproc) -C /opt/environment --output-sync=recurse \
      SPACK_INSTALL_FLAGS=--no-check-signature \
  && spack -D /opt/environment gc -y

# Generate a Meson native file that provides access to the installed packages, using Jinja2
COPY ci/spack-deps/j2-spack.py ci/spack-deps/spack_env.ini.j2 /tmp/
RUN \
  export PATH=/opt/spack/bin:"$PATH" \
  && py="$(spack -D /opt/environment find --format='{prefix}' python)/bin/python" \
  && "$py" -m venv /tmp/venv && /tmp/venv/bin/python -m pip install 'Jinja2>=3.1,<4' \
  && /tmp/venv/bin/python /tmp/j2-spack.py /tmp/spack_env.ini.j2 /usr/share/meson/native/spack_env.ini \
  && rm -r /tmp/j2-spack.py /tmp/spack_env.ini.j2 /tmp/venv


# Installation stage: Get all the software into a single image
FROM $BASE as install

# Some images set problematic environment variables. Wipe those out first for safety.
ENV \
  PYTHONPATH= \
  PKG_CONFIG_PATH= \
  PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
  CPATH= \
  LIBRARY_PATH= \
  LD_LIBRARY_PATH= \
  CMAKE_PREFIX_PATH=

# Install the required OS packages
COPY ci/os/install-os-packages.sh /tmp/
RUN \
  /tmp/install-os-packages.sh \
  && rm /tmp/install-os-packages.sh

# Install a up-to-date versions of Meson and Ninja, using a suitable Python
RUN \
  for trial in python3.12 python3.11 python3.10 python3.9 python3.8 python3 python; do \
    if command -v "$trial" > /dev/null 2>&1; then python="$trial"; break; fi \
  done \
  && "$python" -m pip install 'meson[ninja]>=1.1.0,<2'

# Copy in the Spack-built software
COPY --from=spackbuild /opt/software /opt/software

# Generation stage: Generate the image.ini and verify that the image works as intended
FROM install as generation

# Identify all the native files that this image can support
COPY ci/native/src/ /usr/share/meson/native/
COPY ci/os/prune-native.sh /tmp/
RUN \
  /tmp/prune-native.sh \
  && rm /tmp/prune-native.sh

# Generate the final image.ini by patching the one generated during a previous stage
COPY --from=spackbuild /usr/share/meson/native/spack_env.ini /usr/share/meson/native/image.ini
COPY ci/native/patch-native.py /tmp/
RUN \
  for trial in python3.12 python3.11 python3.10 python3.9 python3.8 python3 python; do \
    if command -v "$trial" > /dev/null 2>&1; then python="$trial"; break; fi \
  done \
  && do_patch() { \
    if test -e /usr/share/meson/native/"$1".patch.ini; then \
      "$python" /tmp/patch-native.py \
        /usr/share/meson/native/image.ini /usr/share/meson/native/"$1".patch.ini \
      && rm /usr/share/meson/native/"$1".patch.ini; \
    fi; \
  } \
  && do_patch cuda \
  && do_patch rocm \
  && do_patch level-zero \
  && do_patch gtpin \
  && ! test -e /usr/share/meson/native/*.patch.ini

# At this point the image should be complete. Test the image before continuing to ensure it
# actually does in fact work as intended.
# TODO: Currently the bind-mount needs to be rw, because Autotools.
COPY ci/verify-image.sh /tmp/
RUN --mount=type=bind,target=/src/hpctoolkit,rw \
    --mount=type=bind,from=scratch,target=/tmp/tmpdir,rw \
  /tmp/verify-image.sh /src/hpctoolkit /tmp/tmpdir/builddir


# Final stage, putting it all together
FROM install
COPY --from=generation /usr/share/meson/native/ /usr/share/meson/native/
