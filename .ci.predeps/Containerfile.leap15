# OS installation stage: Install build tools from the OS
FROM docker.io/opensuse/leap:15 as os-install

# Install the required OS packages
RUN \
  zypper install -y \
    binutils-devel \
    ccache \
    clang \
    cmake \
    gcc \
    gcc-c++ \
    gcc12 \
    gcc12-c++ \
    git \
    libboost_atomic-devel \
    libboost_chrono-devel \
    libboost_date_time-devel \
    libboost_filesystem-devel \
    libboost_graph-devel \
    libboost_system-devel \
    libboost_thread-devel \
    libboost_timer-devel \
    libbz2-devel \
    libomp-devel \
    libpfm-devel \
    libxerces-c-devel \
    libzstd-devel \
    make  `# FIXME: See https://gitlab.com/hpctoolkit/hpctoolkit/-/issues/704` \
    mpich-devel \
    ninja \
    ocl-icd-devel \
    opencl-headers \
    papi-devel \
    pkg-config \
    python311 \
    python311-devel \
    python311-pip \
    tbb-devel \
    xxhash-devel \
    xz-devel \
    yaml-cpp-devel \
    zlib-devel \
  && : # END

# Install a up-to-date version of Meson
# Also install docutils for processing documentation
RUN \
  python3.11 -m pip install \
    'meson>=1.3.2,<2' \
    'docutils' \
  && : # END

# Ensure the appropriate MPI is loaded into the shell environment, always.
RUN mpi-selector --system --set mpich
ENTRYPOINT ["/bin/sh", "-c", ". /etc/profile.d/mpi-selector.sh && exec \"$@\"", "sh"]
CMD ["/bin/bash"]


# From-source installation side-stage: Install (some) software from source
FROM os-install as src-install
RUN \
  git clone --depth=1 https://github.com/HPCToolkit/libmonitor.git /tmp/libmonitor \
  && mkdir /tmp/builddir && cd /tmp/builddir \
  && /tmp/libmonitor/configure --prefix=/opt/libmonitor --disable-dlfcn --enable-client-signals='SIGBUS, SIGSEGV, SIGPROF, 36, 37, 38' \
  && make \
  && DESTDIR=/dest make install


# Composition stage: Produce what will become the final image
FROM os-install
COPY --from=src-install /dest /
COPY \
  ci/native/src/clang.ini \
  ci/native/src/gcc12.ini \
  /usr/share/meson/native/

RUN t=/usr/share/meson/native/hpctoolkit-ci.ini && rm -f "$t" \
  && echo "[built-in options]" >> "$t" \
  && echo "wrap_mode = 'nofallback'" >> "$t" \
  && echo "force_fallback_for = ['dyninst', 'elfutils', 'libunwind', 'xed']" >> "$t" \
  && echo "" >> "$t" \
  && echo "[project options]" >> "$t" \
  && echo "auto_features = 'enabled'" >> "$t" \
  && echo "cuda = 'disabled'" >> "$t" \
  && echo "rocm = 'disabled'" >> "$t" \
  && echo "level0 = 'disabled'" >> "$t" \
  && echo "gtpin = 'disabled'" >> "$t" \
  && echo "" >> "$t" \
  && echo "[zstd:project options]" >> "$t" \
  && echo "lz4 = 'disabled'" >> "$t" \
  && : # EOF

# Set CMAKE_PREFIX_PATH to the paths for all the bits, and set the default compiler to GCC 12
ENV \
  CC="ccache gcc-12" CXX="ccache g++-12" \
  CMAKE_PREFIX_PATH=/opt/libmonitor${CMAKE_PREFIX_PATH:+:$CMAKE_PREFIX_PATH}
