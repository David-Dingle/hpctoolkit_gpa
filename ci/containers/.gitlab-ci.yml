# This pipeline fragment builds and publishes the container images we use in CI.

variables:
  DEPS_FORCE_REBUILD:
    value: "false"
    options:
    - "true"
    - "false"
    description: "If true, force rebuilding the deps images."

# Mixin job base for any job that needs to use the CI-managed images. See more specific variants below.
.image job:
  image: $DEPS_IMAGE_PREFIX-$OS_BASE$OS_EXT-$ARCH
  tags: [docker, linux/$ARCH]
  rules:
  - &rebuild_rules
    # In these cases we need to rebuild the images, so use the just-built images.
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      variables: &rebuild_vars
        DEPS_IMAGE_PREFIX: $CI_REGISTRY_IMAGE/ci:$CI_COMMIT_SHA
    - if: $DEPS_FORCE_REBUILD == "true"
      variables: *rebuild_vars
    - if: '$CI_MERGE_REQUEST_LABELS =~ /ci: rebuild images/'
      variables: *rebuild_vars
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
      - ci/containers/**/Containerfile.in  # Containerfiles for the various containers
      - ci/containers/**/*.inc  # Containerfile fragments shared between containers
      - lib/dev/hpctoolkit_dev/pyproject.toml  # Dependency specification for the dev script
      - lib/dev/hpctoolkit_dev/envs.py  # Contains generation code for the environments
      variables: *rebuild_vars
    # If we can't find an image to reuse, just bite the bullet and rebuild.
    - if: >-
        $CI_MERGE_REQUEST_DIFF_BASE_SHA == null || $CI_MERGE_REQUEST_DIFF_BASE_SHA == "0000000000000000000000000000000000000000"
        || $CI_MERGE_REQUEST_TARGET_BRANCH_SHA == null || $CI_MERGE_REQUEST_TARGET_BRANCH_SHA == "0000000000000000000000000000000000000000"
      variables: *rebuild_vars
  # Otherwise we want to reuse an image from somewhere else. Try the merge-base first.
  - if: '$CI_MERGE_REQUEST_DIFF_BASE_SHA && $CI_MERGE_REQUEST_DIFF_BASE_SHA != "0000000000000000000000000000000000000000"'
    variables:
      DEPS_IMAGE_PREFIX: registry.gitlab.com/hpctoolkit/hpctoolkit/ci:$CI_MERGE_REQUEST_DIFF_BASE_SHA
  # The merge-base may not exist (e.g. empty MRs). Use the tip of the target branch in that case.
  - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_SHA && $CI_MERGE_REQUEST_TARGET_BRANCH_SHA != "0000000000000000000000000000000000000000"'
    variables:
      DEPS_IMAGE_PREFIX: registry.gitlab.com/hpctoolkit/hpctoolkit/ci:$CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED
  # This case should never happen.
  - variables:
      DEPS_IMAGE_PREFIX: nowhere/should/never/happen

# Specific mixin jobs to use the CI-managed images. Set the OS_BASE and optionally OS_EXT to use.
.image job amd64:
  extends: .image job
  needs:
  - job: 'deps:package: [amd64]'
    optional: true
  variables: {ARCH: amd64}
.image job arm64:
  extends: .image job
  needs:
  - job: 'deps:package: [arm64]'
    optional: true
  variables: {ARCH: arm64}


# All jobs only needed for rebuilding the images extend from this mixin.
.image rebuild job:
  rules: *rebuild_rules


# Package up images containing the Spack-built dependencies
'deps:package: [amd64]':
  extends: .image rebuild job
  stage: deps:package
  tags: [docker, linux/amd64]
  image: quay.io/buildah/stable
  retry: 2
  needs:
  - 'deps:concretize: [amd64]'
  - 'deps:build amd64'
  variables:
    ARCH: amd64
  parallel:
    matrix:
    # Base CI images
    - BASE: [leap15, almalinux8, ubuntu20.04, fedora37]
    # CI images including the CUDA Toolkit
    - BASE: almalinux8
      EXT: [cuda10.2]
    - BASE: ubuntu20.04
      EXT: [cuda11.6.2, cuda11.8.0, cuda12.0.1]
    # CI images including the ROCm tools
    - BASE: ubuntu20.04
      EXT: [rocm5.1.3, rocm5.2.3, rocm5.3.2, rocm5.4.2]
    # CI images including Level 0 (and GTPin)
    - BASE: ubuntu20.04
      EXT: [lvlz2022.2, lvlz2022.3.1, lvlz2023.0.0]
  cache:
  - key: buildah-$BASE:$ARCH
    paths:
    - .buildah-cache/

  before_script:
  # Log into the registry
  - sudo -u build buildah login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - IMAGE=$BASE${EXT:+-}$EXT
  # Set up the cache and commands
  - mkdir -p .buildah-cache/
  - chown -R build:build .buildah-cache/
  - ln -s $CI_PROJECT_DIR/.buildah-cache/ /var/tmp/buildah-cache-$(id -u build)
  - bdah() { sudo -Eu build buildah "$@"; }

  script:
  - test "$DEPS_IMAGE_PREFIX" = "$CI_REGISTRY_IMAGE/ci:$CI_COMMIT_SHA"
  - tag="$DEPS_IMAGE_PREFIX-$IMAGE-$ARCH"

  # Build the image we want to use in CI
  - ci/containers/expand-includes ci/containers/$IMAGE/Containerfile.in > ci/containers/$IMAGE/Containerfile
  - >-
    bdah build
    --secret id=buildcache,src="$SBCACHE_YAML"
    --build-context lib=lib/
    --build-context cenv=cenv/$BASE-$ARCH/
    --tag "$tag" --arch $ARCH
    --layers --cache-from "$CI_REGISTRY_IMAGE/cache" --cache-to "$CI_REGISTRY_IMAGE/cache"
    ci/containers/$IMAGE

  # Push up the built image
  - bdah push --digestfile "$IMAGE-$ARCH.digest" "$tag"
'deps:package: [arm64]':
  extends: 'deps:package: [amd64]'
  tags: [docker, linux/arm64]
  needs:
  - 'deps:concretize: [arm64]'
  - 'deps:build arm64'
  variables:
    ARCH: arm64
  parallel:
    matrix:
    - BASE: [ubuntu20.04]
