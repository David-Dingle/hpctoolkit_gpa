From c077edf23a6235e6f12637cbf473046ff189bdca Mon Sep 17 00:00:00 2001
From: blue42u <anderson.jonathonm@gmail.com>
Date: Sun, 14 Aug 2022 10:04:07 -0500
Subject: [PATCH 1/2] Update the binary index before attempting direct fetches

Co-authored-by: Tamara Dahlgren <35777542+tldahlgren@users.noreply.github.com>
---
 lib/spack/spack/binary_distribution.py | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/lib/spack/spack/binary_distribution.py b/lib/spack/spack/binary_distribution.py
index aa8660b804..a80a72ec69 100644
--- a/lib/spack/spack/binary_distribution.py
+++ b/lib/spack/spack/binary_distribution.py
@@ -243,7 +243,6 @@ def find_built_spec(self, spec, mirrors_to_check=None):
                         }
                     ]
         """
-        self.regenerate_spec_cache()
         return self.find_by_hash(spec.dag_hash(), mirrors_to_check=mirrors_to_check)
 
     def find_by_hash(self, find_hash, mirrors_to_check=None):
@@ -254,6 +253,9 @@ def find_by_hash(self, find_hash, mirrors_to_check=None):
             mirrors_to_check: Optional mapping containing mirrors to check.  If
                 None, just assumes all configured mirrors.
         """
+        if find_hash not in self._mirrors_for_spec:
+            # Not found in the cached index, pull the latest from the server.
+            self.update()
         if find_hash not in self._mirrors_for_spec:
             return None
         results = self._mirrors_for_spec[find_hash]
@@ -1970,8 +1972,8 @@ def get_mirrors_for_spec(spec=None, mirrors_to_check=None, index_only=False):
 
     results = binary_index.find_built_spec(spec, mirrors_to_check=mirrors_to_check)
 
-    # Maybe we just didn't have the latest information from the mirror, so
-    # try to fetch directly, unless we are only considering the indices.
+    # The index may be out-of-date. If we aren't only considering indices, try
+    # to fetch directly since we know where the file should be.
     if not results and not index_only:
         results = try_direct_fetch(spec, mirrors=mirrors_to_check)
         # We found a spec by the direct fetch approach, we might as well
-- 
2.37.2

From ab398063db3155aac4f294c107979bf61c68017f Mon Sep 17 00:00:00 2001
From: blue42u <anderson.jonathonm@gmail.com>
Date: Sat, 27 Aug 2022 16:13:55 -0500
Subject: [PATCH 2/2] Add a TTL to cached binary indices

To allow for index re-fetches in sufficiently long-running Spack commands
---
 etc/spack/defaults/config.yaml         |  7 ++++-
 lib/spack/spack/binary_distribution.py | 42 +++++++++++++++++++-------
 lib/spack/spack/schema/config.py       |  1 +
 lib/spack/spack/test/bindist.py        |  9 +++---
 4 files changed, 43 insertions(+), 16 deletions(-)

diff --git a/etc/spack/defaults/config.yaml b/etc/spack/defaults/config.yaml
index 2328c9a71e..dcc1519471 100644
--- a/etc/spack/defaults/config.yaml
+++ b/etc/spack/defaults/config.yaml
@@ -202,6 +202,11 @@ config:
   # current progress as well as the current and total number of packages.
   terminal_title: false
 
+
   # Directory to cache files downloaded from buildcaches. Should be 'null' in most cases,
   # unless you wipe your Spack install tree frequently (e.g. in CI).
-  binary_cache_root: null
\ No newline at end of file
+  binary_cache_root: null
+
+  # Number of seconds a buildcache's index.json is cached locally before probing
+  # for updates, within a single Spack invocation. Defaults to 10 minutes.
+  binary_index_ttl: 600
diff --git a/lib/spack/spack/binary_distribution.py b/lib/spack/spack/binary_distribution.py
index a80a72ec69..93340cafd1 100644
--- a/lib/spack/spack/binary_distribution.py
+++ b/lib/spack/spack/binary_distribution.py
@@ -13,6 +13,7 @@
 import sys
 import tarfile
 import tempfile
+import time
 import traceback
 import warnings
 from contextlib import closing
@@ -106,6 +107,9 @@ def __init__(self, cache_root):
         # cache (_mirrors_for_spec)
         self._specs_already_associated = set()
 
+        # mapping from mirror urls to the time.time() of the last index fetch.
+        self._last_fetch_times = {}
+
         # _mirrors_for_spec is a dictionary mapping DAG hashes to lists of
         # entries indicating mirrors where that concrete spec can be found.
         # Each entry is a dictionary consisting of:
@@ -138,6 +142,7 @@ def clear(self):
             self._index_file_cache = None
         self._local_index_cache = None
         self._specs_already_associated = set()
+        self._last_fetch_times = {}
         self._mirrors_for_spec = {}
 
     def _write_local_index_cache(self):
@@ -328,24 +333,36 @@ def update(self):
 
         fetch_errors = []
         all_methods_failed = True
+        ttl = spack.config.get("config:binary_index_ttl", 600)
+        now = time.time()
 
         for cached_mirror_url in self._local_index_cache:
             cache_entry = self._local_index_cache[cached_mirror_url]
             cached_index_hash = cache_entry["index_hash"]
             cached_index_path = cache_entry["index_path"]
             if cached_mirror_url in configured_mirror_urls:
-                # May need to fetch the index and update the local caches
-                try:
-                    needs_regen = self._fetch_and_cache_index(
-                        cached_mirror_url, expect_hash=cached_index_hash
-                    )
+                # Only do a fetch if the last fetch was longer than TTL ago
+                if (
+                    ttl > 0
+                    and cached_mirror_url in self._last_fetch_times
+                    and now - self._last_fetch_times[cached_mirror_url] < ttl
+                ):
+                    # The fetch worked last time, so don't error
                     all_methods_failed = False
-                except FetchCacheError as fetch_error:
-                    needs_regen = False
-                    fetch_errors.extend(fetch_error.errors)
-                # The need to regenerate implies a need to clear as well.
-                spec_cache_clear_needed |= needs_regen
-                spec_cache_regenerate_needed |= needs_regen
+                else:
+                    # May need to fetch the index and update the local caches
+                    try:
+                        needs_regen = self._fetch_and_cache_index(
+                            cached_mirror_url, expect_hash=cached_index_hash
+                        )
+                        self._last_fetch_times[cached_mirror_url] = now
+                        all_methods_failed = False
+                    except FetchCacheError as fetch_error:
+                        needs_regen = False
+                        fetch_errors.extend(fetch_error.errors)
+                    # The need to regenerate implies a need to clear as well.
+                    spec_cache_clear_needed |= needs_regen
+                    spec_cache_regenerate_needed |= needs_regen
             else:
                 # No longer have this mirror, cached index should be removed
                 items_to_remove.append(
@@ -354,6 +371,8 @@ def update(self):
                         "cache_key": os.path.join(self._index_cache_root, cached_index_path),
                     }
                 )
+                if cached_mirror_url in self._last_fetch_times:
+                    del self._last_fetch_times[cached_mirror_url]
                 spec_cache_clear_needed = True
                 spec_cache_regenerate_needed = True
 
@@ -372,6 +391,7 @@ def update(self):
                 # Need to fetch the index and update the local caches
                 try:
                     needs_regen = self._fetch_and_cache_index(mirror_url)
+                    self._last_fetch_times[mirror_url] = now
                     all_methods_failed = False
                 except FetchCacheError as fetch_error:
                     fetch_errors.extend(fetch_error.errors)
diff --git a/lib/spack/spack/schema/config.py b/lib/spack/spack/schema/config.py
index 8ac2c67bcc..e6bd700881 100644
--- a/lib/spack/spack/schema/config.py
+++ b/lib/spack/spack/schema/config.py
@@ -73,6 +73,7 @@
             "binary_cache_root": {"anyOf": [{"type": "null"}, {"type": "string"}]},
             "url_fetch_method": {"type": "string", "enum": ["urllib", "curl"]},
             "additional_external_search_paths": {"type": "array", "items": {"type": "string"}},
+            "binary_index_ttl": {"type": "integer", "minimum": 0},
         },
         "deprecatedProperties": {
             "properties": ["module_roots"],
diff --git a/lib/spack/spack/test/bindist.py b/lib/spack/spack/test/bindist.py
index b2bbbe200c..f3eb9af231 100644
--- a/lib/spack/spack/test/bindist.py
+++ b/lib/spack/spack/test/bindist.py
@@ -453,10 +453,11 @@ def test_generate_index_missing(monkeypatch, tmpdir, mutable_config):
     # Update index
     buildcache_cmd("update-index", "-d", mirror_dir.strpath)
 
-    # Check dependency not in buildcache
-    cache_list = buildcache_cmd("list", "--allarch")
-    assert "libdwarf" in cache_list
-    assert "libelf" not in cache_list
+    with spack.config.override("config:binary_index_ttl", 0):
+        # Check dependency not in buildcache
+        cache_list = buildcache_cmd("list", "--allarch")
+        assert "libdwarf" in cache_list
+        assert "libelf" not in cache_list
 
 
 def test_generate_indices_key_error(monkeypatch, capfd):
-- 
2.37.2
