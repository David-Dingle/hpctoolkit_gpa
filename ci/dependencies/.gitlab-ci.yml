# NB: This is a crazy pipeline to dodge fundamental flaws in Spack:
#   - `spack ci` doesn't work on multiple environments. This means we have to
#     generate one pipeline per environment concretization.
#   - Spack has to be gently massaged / heavily tainted to cross-concretize correctly.
#     This means operations spanning multiple OSs, like concretization, need to be
#     spread out across multiple jobs and containers... and thus pipelines.
#   - Spack environments are unable to unify specs in a stable and controlled manner,
#     either all specs are concretized together (and views are possible), or
#     some to none are (and views are likely to fail). So we need multiple envionments
#     to properly express our testing dependencies.
#
# In short, if done the correct and straightforward way, we would have a combinatorial
# explosion of jobs and pipelines in this file. To avoid that, we use a "Multi-Level Pipeline" (MLP)
# approach. We let `spack ci generate` generate a boatload of pipelines, but then use an automated
# script to generate a single top-level pipeline that launches all the others. This removes most of
# the combinatorial burden, leaving us with (two) trigger jobs to launch the MLP.

# Generate a pipeline for each combination of OS and arch.
'deps:generate: [amd64]':
  stage: deps:generate
  image:
    name: $IMAGE_NAME
    entrypoint: ['spack-env']
  tags: [docker, linux/$ARCH]
  needs: []
  rules: !reference [.rebuild images, rules]
  variables:
    ARCH: amd64
  parallel:
    matrix:
    - IMAGE_NAME: ghcr.io/spack/leap15:latest
      IMAGE: leap15
    - IMAGE_NAME: ghcr.io/spack/almalinux8:latest
      IMAGE: almalinux8
    - IMAGE_NAME: ghcr.io/spack/ubuntu-focal:latest
      IMAGE: ubuntu20.04
    - IMAGE_NAME: ghcr.io/spack/fedora37:latest
      IMAGE: fedora37

  script:
  # Set up concrete environments named by the OS and ARCH
  - mkdir -p ci/dependencies/c/$IMAGE/$ARCH/_autogen/
  - cp ci/dependencies/_autogen/spack.yaml ci/dependencies/c/$IMAGE/$ARCH/_autogen/
  - mkdir -p ci/dependencies/c/$IMAGE/$ARCH/minimum/
  - cp ci/dependencies/minimum/spack.yaml ci/dependencies/c/$IMAGE/$ARCH/minimum/
  - mkdir -p ci/dependencies/c/$IMAGE/$ARCH/latest/
  - cp ci/dependencies/latest/spack.yaml ci/dependencies/c/$IMAGE/$ARCH/latest/

  # Concretize each of the environments in turn, into subdirectories named by the OS and ARCH
  - >-
    echo -e '_autogen\nminimum\nlatest' | xargs -P0 -I '{}' -t
    spack -e "ci/dependencies/c/$IMAGE/$ARCH/{}/" -C ci/dependencies/config/ concretize --reuse
  # Load the target downstream buildcache now, after everything is concretized
  - spack config add -f "$SBCACHE_YAML"
  # Generate pipelines for each of the environments
  - >-
    echo -e "_autogen\nminimum\nlatest" | xargs -P0 -I '{}' -t
    spack -e "ci/dependencies/c/$IMAGE/$ARCH/{}/" -C ci/dependencies/config/ ci generate
    --check-index-only
    --buildcache-destination "$(spack mirror list | grep -m1 '^main-bcache ' | awk '{print $2}')"
    --artifacts-root "spack-ci-artifacts/$IMAGE/$ARCH/{}/"
    --output-file "spack-ci-artifacts/$IMAGE/$ARCH/{}/ci.yml"
  # Annotate the pipeline with the source job, for the MLP
  - >-
    echo -e "\n...\n---\nsource: {pipeline: \"$CI_PIPELINE_ID\", job: \"$CI_JOB_NAME\", name: \"$IMAGE $ARCH\"}"
    | tee -a spack-ci-artifacts/$IMAGE/$ARCH/{_autogen,minimum,latest}/ci.yml

  artifacts:
    paths:
    - ci/dependencies/c/*/*/*/spack.lock
    - spack-ci-artifacts/

'deps:generate: [arm64]':
  extends: 'deps:generate: [amd64]'
  variables:
    ARCH: arm64
  parallel:
    matrix:
    # - IMAGE:
    #   - almalinux8
    #   - fedora37
    - IMAGE_NAME: ghcr.io/spack/ubuntu-focal:latest
      IMAGE: ubuntu20.04


# Construct a Multi-Level Pipeline that runs all the pipelines from spack ci generate
'deps:mlp: [amd64]':
  stage: deps:prep
  tags: [docker]
  image: docker.io/python:3.11-bullseye
  rules: !reference [.rebuild images, rules]
  needs:
  - 'deps:generate: [amd64]'
  before_script:
  - python3 -m pip install ruamel.yaml
  script:
  - >-
    ci/dependencies/mlp ci.yml
    spack-ci-artifacts/{almalinux8,fedora37,leap15,ubuntu20.04}/amd64/{_autogen,minimum,latest}/ci.yml
  artifacts:
    paths:
    - ci.yml
'deps:mlp: [arm64]':
  extends: 'deps:mlp: [amd64]'
  needs:
  - 'deps:generate: [arm64]'
  script:
  - >-
    ci/dependencies/mlp ci.yml
    spack-ci-artifacts/ubuntu20.04/arm64/{_autogen,minimum,latest}/ci.yml


# Launch the MLP and get this done.
deps:build amd64:
  stage: deps:build
  rules: !reference [.rebuild images, rules]
  needs: ['deps:mlp: [amd64]']
  trigger:
    strategy: depend
    include:
    - job: 'deps:mlp: [amd64]'
      artifact: ci.yml
deps:build arm64:
  stage: deps:build
  rules: !reference [.rebuild images, rules]
  needs: ['deps:mlp: [arm64]']
  trigger:
    strategy: depend
    include:
    - job: 'deps:mlp: [arm64]'
      artifact: ci.yml
