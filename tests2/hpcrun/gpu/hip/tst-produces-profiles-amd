#!/usr/bin/env python3

from pathlib import Path

import click
from hpctoolkit.test.execution import hpcrun


@click.command()
@click.option("-p", "--procs", type=int, default=1, help="Expected number of processes")
@click.option(
    "-t", "--threads-per-proc", type=int, default=1, help="Expected number of threads per process"
)
@click.option("--trace", is_flag=True, help="Enable tracing (hpcrun -t)")
@click.option("--ttrace", is_flag=True, help="Enable boosted tracing (hpcrun -tt)")
@click.option(
    "--rocprofiler-path",
    type=click.Path(exists=True, file_okay=False, readable=True, resolve_path=True, path_type=Path),
    required=True,
    help="Path to the rocprofiler install root",
)
@click.argument("cmd", nargs=-1, required=True)
def test_produces_profiles(
    procs: int,
    threads_per_proc: int,
    trace: bool,
    ttrace: bool,
    rocprofiler_path: Path,
    cmd: tuple[str],
):
    """Test that measuring CMD with ROCm support produces an expected number of profiles."""
    with hpcrun(
        "-e",
        "gpu=amd",
        "--rocprofiler-path",
        str(rocprofiler_path),
        ("-t" if trace else None),
        ("-tt" if ttrace else None),
        cmd=cmd,
    ) as meas:
        meas.check_standard(
            procs=procs,
            # FIXME: We allow one extra CPU thread to account for a loose ROCm thread that we
            # record on ROCm 5.3 and 5.4. This is probably a bug but for now we let the test pass.
            threads_per_proc={
                threads_per_proc + (1 if trace or ttrace else 0),
                threads_per_proc + 1 + (1 if trace or ttrace else 0),
            },
            traces=trace or ttrace,
        )


if __name__ == "__main__":
    test_produces_profiles()  # pylint: disable=no-value-for-parameter)
