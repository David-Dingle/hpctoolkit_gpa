#!/usr/bin/env python3

import sys
from pathlib import Path

import click
import ruamel.yaml
from hpctoolkit.formats import from_path, vcurrent
from hpctoolkit.match.context import MatchCtx, MatchEntryPoint, chainmatch
from hpctoolkit.test.execution import hpcprof, hpcrun


@click.group()
def test_unwound_python():
    """Test that measuring a given Python script will result in an appropriate recorded logical callstack."""


@test_unwound_python.command()
@click.option("-t", "--threads", type=int, default=1, help="Expected number of threads")
@click.argument(
    "script",
    type=click.Path(exists=True, readable=True, dir_okay=False, resolve_path=True, path_type=Path),
)
@click.argument("args", nargs=-1)
def simple(threads: int, script: Path, args: tuple[str]):
    """Test that measuring SCRIPT (+ ARGS) results in a func_hi -> func_mid -> func_lo callstack.

    Specifically, searches for a callpath of the form:

    \b
    (main_thread)
    -call> [line] SCRIPT
    -call> [function] func_hi
    -lexical> [line] SCRIPT
    -call> [function] func_mid
    -lexical> [line] SCRIPT
    -call> [function] func_lo
    """  # noqa: D301
    if not sys.executable:
        raise RuntimeError("No Python interpreter executable!")

    with hpcrun("-a", "python", "-e", "REALTIME", cmd=[sys.executable, str(script), *args]) as meas:
        meas.check_standard(procs=1, threads_per_proc=threads)

        with hpcprof(meas) as raw_db:
            db = from_path(raw_db.basedir)
            assert isinstance(db, vcurrent.Database)

            matches = list(
                chainmatch(
                    db.meta.context,
                    MatchEntryPoint(entry_point="main_thread"),
                    MatchCtx(relation="call", lexical_type="line", file=str(script)),
                    MatchCtx(relation="call", lexical_type="function", function="func_hi"),
                    MatchCtx(relation="lexical", lexical_type="line", file=str(script)),
                    MatchCtx(relation="call", lexical_type="function", function="func_mid"),
                    MatchCtx(relation="lexical", lexical_type="line", file=str(script)),
                    MatchCtx(relation="call", lexical_type="function", function="func_lo"),
                )
            )
            if not matches:
                ruamel.yaml.YAML(typ="rt").dump(db.meta.context, sys.stdout)
                raise ValueError("Unable to find match!")
            if len(matches) > 1:
                ruamel.yaml.YAML(typ="rt").dump(db.meta.context, sys.stdout)
                raise ValueError(f"Found {len(matches)} matches, expected 1!")


if __name__ == "__main__":
    test_unwound_python()
