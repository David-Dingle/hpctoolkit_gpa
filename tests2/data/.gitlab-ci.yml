# Pipeline used to regenerate the cached test data
workflow:
  rules:
  - when: always

stages:
- generate
- publish

# Job template to regenerate some subset of the test data
.regen job:
  stage: generate
  cache:
  - key: pkgs-$IMAGE_BASE
    when: always
    paths:
    - .pkg-cache/
  - key: ccache-$IMAGE_BASE$IMAGE_EXT-$JOB_CC
    when: always
    paths:
    - .ccache/

  variables:
    CCACHE_DIR: '$CI_PROJECT_DIR/.ccache'
    CCACHE_BASEDIR: '$CI_PROJECT_DIR'
    # Limit the ccache cache size to a modest level.
    # One HPCToolkit buildmany is ~2.5GB (~600MB compressed) over ~25000 files
    CCACHE_COMPRESS: 'true'
    CCACHE_MAXSIZE: '3G'
    CCACHE_MAXFILES: '30000'
    # Some of the test data is stored in a submodule
    GIT_SUBMODULE_STRATEGY: recursive
    # OpenMPI refuses to run as user 0 without these options set.
    OMPI_ALLOW_RUN_AS_ROOT: 1
    OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  before_script:
  # Install the ./dev scriptsuite in a virtual environment
  - python3 -m venv .dev_venv --clear --upgrade-deps --system-site-packages
  - export PATH="$(realpath .dev_venv/bin/):$PATH"
  - pip install --no-cache-dir --require-virtualenv lib/dev/
  script:
  - dev populate /opt/spack-environment
  # Generate a new batch of test data, saved to the logs/ dir
  - >-
    dev buildfe -d /opt/spack-environment -- -l "logs/$CI_JOB_NAME" -a fresh-testdata-"$SUITE"
    --fail-fast $OS_BUILDFE_ARGS -1s "$SPEC"
  - mv logs/"$CI_JOB_NAME"/*/fresh-"$SUITE".tar.xz logs/fresh-"$SUITE".tar.xz

  artifacts:
    paths:
    - logs/
    when: always


'none':
  extends: .regen job
  image: $PARENT_IMAGE_amd64_ubuntu20_04
  tags: [saas-linux-large-amd64]
  variables:
    JOB_CC: gcc-10
    SPEC: '+tests2 +mpi ~debug +papi +python ~opencl ~cuda ~rocm ~level0'
    SUITE: none

'cpu':
  extends: .regen job
  image: $PARENT_IMAGE_amd64_ubuntu20_04
  tags: [saas-linux-large-amd64, cpu/perf]
  variables:
    JOB_CC: gcc-10
    SPEC: '+tests2 +mpi ~debug +papi +python ~opencl ~cuda ~rocm ~level0'
    SUITE: cpu

'x86-64':
  extends: .regen job
  image: $PARENT_IMAGE_amd64_ubuntu20_04
  tags: [saas-linux-large-amd64, cpu/perf]
  variables:
    JOB_CC: gcc-10
    SPEC: '+tests2 +mpi ~debug +papi +python ~opencl ~cuda ~rocm ~level0'
    SUITE: x86-64

'nvidia':
  extends: .regen job
  image: $PARENT_IMAGE_amd64_cuda11_6_2
  tags: [rice-linux-large-amd64+nvidia, gpu/nvidia/usrspace:11.6, gpu/nvidia>6.0]
  variables:
    OS_BUILDFE_ARGS: '-C--with-cuda=/usr/local/cuda'
    JOB_CC: gcc-9
    SPEC: '+tests2 +mpi ~debug +papi +python ~opencl +cuda ~rocm ~level0'
    SUITE: nvidia

'sw-cuda':
  extends: .regen job
  image: $PARENT_IMAGE_amd64_cuda11_8_0
  tags: [saas-linux-large-amd64]
  variables:
    OS_BUILDFE_ARGS: '-C--with-cuda=/usr/local/cuda'
    JOB_CC: gcc-9
    SPEC: '+tests2 +mpi ~debug +papi +python ~opencl +cuda ~rocm ~level0'
    SUITE: sw-cuda

'amd':
  extends: .regen job
  image: $PARENT_IMAGE_amd64_rocm5_2_3
  tags: [rice-linux-large-amd64+amd, gpu/amd/usrspace:5.2]
  variables:
    OS_BUILDFE_ARGS: '-C--with-rocm=/opt/rocm'
    JOB_CC: gcc-9
    SPEC: '+tests2 +mpi ~debug +papi +python ~opencl ~cuda +rocm ~level0'
    SUITE: amd


package:
  stage: publish
  image: docker.io/alpine
  variables:
    GIT_SUBMODULE_STRATEGY: none
  script:
  - apk add xz
  - mkdir /tmp/result
  # Unpack all the tarballs to the temporary directory
  - tar x -af logs/fresh-none.tar.xz -C /tmp/result
  - tar x -af logs/fresh-cpu.tar.xz -C /tmp/result
  - tar x -af logs/fresh-nvidia.tar.xz -C /tmp/result
  - tar x -af logs/fresh-amd.tar.xz -C /tmp/result
  - tar x -af logs/fresh-x86-64.tar.xz -C /tmp/result
  - tar x -af logs/fresh-sw-cuda.tar.xz -C /tmp/result
  # Repack into a single tarball
  - tar c -Jf testdata.tar.xz -C /tmp/result .
  artifacts:
    expose_as: "Regenerated test data"
    paths:
    - testdata.tar.xz
