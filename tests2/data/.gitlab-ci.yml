# Jobs used to regenerate testing data. Run when requested or required.

.regen job:
  stage: extended test
  extends: .build-job
  dependencies:
  - 'deps: [amd64]'

  rules:
  - &main_rules
    - if: '$CI_MERGE_REQUEST_LABELS =~ /ci: regen testdata/i'
    - if: $REGEN_TESTDATA
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
      - tests2/data/**/*
  - when: on_success
    variables:
      DONT_SAVE: '1'

  variables:
    # OpenMPI refuses to run as user 0 without these options set.
    OMPI_ALLOW_RUN_AS_ROOT: 1
    OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  script:
  - touch img-config
  # Generate a new batch of test data, and copy it back to the source tree
  - >-
    python3 -m ci.buildfe -l "logs/$CI_JOB_NAME/generation/" -a install-testdata
    img-config "ci/dependencies/latest;/spack/cenv/latest"
    --spack-no-install -1s "$SPEC"
  # Pack up the changes as a tarball for extraction
  - git ls-files --modified tests2/data/ > files.txt
  - tar -cJf "data.$SLUG.tar.xz" -T files.txt
  # Re-run the tests on the new data to ensure everything is still a-ok
  - >-
    eatmydata python3 -m ci.buildfe -l "logs/$CI_JOB_NAME/posttest/" -a test
    img-config "ci/dependencies/latest;/spack/cenv/latest"
    --spack-no-install --test-junit-copyout -1s "$SPEC"

  after_script:
  - test -z "$DONT_SAVE" || rm -f "data.$SLUG.tar.xz"

  artifacts:
    reports:
      junit: '*.junit.xml'
    paths:
    - logs/
    - data.*.tar.xz
    when: always


'regen testdata: [cpu]':
  extends: .regen job
  tags: [docker, linux/amd64]
  image: $DEPS_IMAGES-$IMAGE_BASE-$ARCH
  variables:
    IMAGE_BASE: ubuntu20.04
    ARCH: amd64
    JOB_CC: gcc-10
    SPEC: '+tests2 +mpi +debug +papi ~opencl ~cuda ~rocm ~level0'
    SLUG: cpu

'regen testdata: [+cuda]':
  extends: .regen job
  services: &podman_service
  - name: quay.io/podman/stable
    entrypoint: ['/usr/bin/sudo', '-u', 'podman', 'podman', 'system', 'service', '-t', '0', 'tcp://0.0.0.0:7000']
    alias: podman
  image: docker.io/nvidia/cuda:11.6.2-devel-ubuntu20.04
  tags: [docker, linux/amd64, gpu/nvidia/usrspace:11.6, gpu/nvidia>6.0]
  variables:
    IMAGE_BASE: ubuntu20.04
    IMAGE_EXT: +cuda
    ARCH: amd64
    JOB_CC: gcc-9
    SPEC: '+tests2 +mpi +debug +papi ~opencl +cuda ~rocm ~level0'
    SLUG: cuda
  before_script:
  - !reference [.regen job, before_script]
  # Pull CUDA from the image itself
  - echo '--with-cuda=/usr/local/cuda' > img-config
  # Pull dependencies from the base image
  - ci/scripts/podman-cp.py tcp://podman:7000 $DEPS_IMAGES-$IMAGE_BASE-$ARCH /spack

'regen testdata: [+rocm]':
  extends: .regen job
  services: *podman_service
  image: docker.io/rocm/dev-ubuntu-20.04:5.2.3
  tags: [docker, linux/amd64, gpu/amd/usrspace:5.2]
  variables:
    IMAGE_BASE: ubuntu20.04
    IMAGE_EXT: +rocm
    ARCH: amd64
    JOB_CC: gcc-9
    SPEC: '+tests2 +mpi +debug +papi ~opencl ~cuda +rocm ~level0'
    SLUG: rocm
  before_script:
  - !reference [.regen job, before_script]
  # Pull ROCm from the image itself
  - echo '--with-rocm=/opt/rocm' > img-config
  # Pull dependencies from the base image
  - ci/scripts/podman-cp.py tcp://podman:7000 $DEPS_IMAGES-$IMAGE_BASE-$ARCH /spack


.regen testdata:
  stage: update
  image: registry.gitlab.com/hpctoolkit/ci-images/ubuntu20.04
  tags: [docker]
  rules: *main_rules
  dependencies:
  - 'regen testdata: [cpu]'
  - 'regen testdata: [+cuda]'
  - 'regen testdata: [+rocm]'
  script:
  # Unpack all the tarballs, in sequence
  - tar -xJf data.cuda.tar.xz
  - tar -xJf data.rocm.tar.xz
  - tar -xJf data.cpu.tar.xz
  # Repackage the changes as a new tarball for easy deployment
  - git ls-files --modified tests2/data/ > files.txt
  - tar -cJf "testdata.tar.xz" -T files.txt
  artifacts:
    expose_as: "Refreshed test data"
    paths:
    - testdata.tar.xz
