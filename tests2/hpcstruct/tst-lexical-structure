#!/usr/bin/env python3

import abc
import collections.abc
import re
import string
import typing
import xml.etree.ElementTree as XmlET
from pathlib import Path

import click
import pyparsing as pp
from hpctoolkit.test.execution import hpcstruct


class ValueLike(abc.ABC):
    @abc.abstractmethod
    def as_value(
        self, *, bounds: tuple[int, int], par_bounds: tuple[int, int] | None = None
    ) -> "Value":
        pass


class Value(ValueLike):
    def as_value(
        self, *, bounds: tuple[int, int], par_bounds: tuple[int, int] | None = None
    ) -> "Value":
        return self

    @abc.abstractmethod
    def matches(self, value: str) -> bool:
        pass

    @classmethod
    def parser(cls, *, file: str, binary: str, debug: bool) -> pp.ParserElement:
        return (
            AnyValue.parser()
            | InboundsPlaceholder.parser(debug=debug)
            | IntRangeValue.parser(debug=debug)
            | LiteralValue.parser(file=file, binary=binary, debug=debug)
        ).set_name("value")


class InboundsPlaceholder(ValueLike):
    def __init__(self, *, parent: bool):
        self.parent_bounds = parent

    def __str__(self) -> str:
        return "<inparbounds>" if self.parent_bounds else "<inbounds>"

    def as_value(
        self, *, bounds: tuple[int, int], par_bounds: tuple[int, int] | None = None
    ) -> typing.Union["IntRangeValue", "AnyValue"]:
        if self.parent_bounds:
            return (
                IntRangeValue(par_bounds[0], par_bounds[1])
                if par_bounds is not None
                else AnyValue()
            )
        return IntRangeValue(bounds[0], bounds[1])

    @classmethod
    def parser(cls, *, debug: bool) -> pp.ParserElement:
        val = pp.Literal("inbounds") | "inparbounds"

        @val.set_parse_action
        def lift(toks: pp.ParseResults) -> InboundsPlaceholder | IntRangeValue:
            if not debug:
                return IntRangeValue(0)
            match toks[0]:  # noqa: E999
                case "inbounds":
                    return cls(parent=False)
                case "inparbounds":
                    return cls(parent=True)
                case _:
                    raise AssertionError

        return val


class AnyValue(Value):
    def __str__(self) -> str:
        return "*"

    def matches(self, value: str) -> bool:
        return True

    @classmethod
    def parser(cls, **_kwargs) -> pp.ParserElement:
        return pp.Literal("*").set_parse_action(lambda: cls())  # pylint: disable=unnecessary-lambda


class LiteralValue(Value):
    def __init__(self, literal: str, *, bracket_suffix: bool | None = False):
        self.literal = literal
        self.bracket_suffix = bracket_suffix

    def __str__(self) -> str:
        if self.bracket_suffix is None:
            return f"{self.literal!r}[*]?"
        if self.bracket_suffix:
            return f"{self.literal!r}[*]"
        return repr(self.literal)

    def matches(self, value: str) -> bool:
        if self.bracket_suffix is False:
            return value == self.literal
        if not value.startswith(self.literal):
            return False

        suffix = value[len(self.literal) :]
        if not suffix:
            return not self.bracket_suffix

        if self.literal and not suffix[0].isspace():
            return False

        suffix = suffix.lstrip()
        return suffix[0] == "[" and suffix[-1] == "]"

    @classmethod
    def parser(cls, *, file: str, binary: str, debug: bool) -> pp.ParserElement:
        bsuffix = pp.Opt(
            pp.Combine(
                pp.Literal("[")
                + (
                    pp.Literal("*")("always")
                    ^ pp.Literal("dbg:*")("debugonly")
                    ^ pp.Literal("nodbg:*")("nodebugonly")
                    ^ pp.Literal("*?")("opt")
                )
                + "]"
            )
        )

        @bsuffix.set_parse_action
        def parse_brackets(toks: pp.ParseResults) -> list[bool | None]:
            if toks.always:
                return [True]
            if toks.opt:
                return [None]
            if toks.debugonly:
                return [debug]
            if toks.nodebugonly:
                return [not debug]
            return [False]

        std = pp.Combine(pp.QuotedString('"')("literal") + bsuffix("bs"))

        @std.set_parse_action
        def lift_std(toks: pp.ParseResults) -> LiteralValue:
            return cls(toks.literal, bracket_suffix=toks.bs)

        c_file = pp.Combine(pp.Literal("file") + bsuffix("bs"))

        @c_file.set_parse_action
        def lift_file(toks: pp.ParseResults) -> LiteralValue:
            return cls(file if debug else "", bracket_suffix=toks.bs)

        c_binary = pp.Literal("binary").set_parse_action(lambda: cls(binary))

        return c_file | c_binary | std


class IntRangeValue(Value):
    def __init__(self, min_val: int, max_val: int | None = None, *, plus: int = 0):
        if plus < 0:
            raise ValueError(plus)
        if max_val is not None and min_val > max_val:
            raise ValueError((min_val, max_val))

        self.min_val = min_val
        if max_val is not None:
            self.max_val = max_val
        else:
            self.max_val = min_val + plus

    def __str__(self) -> str:
        return (
            f"<in [{self.min_val:d}, {self.max_val:d}]>"
            if self.min_val != self.max_val
            else f"{self.min_val:d}"
        )

    def matches(self, value: str) -> bool:
        try:
            ivalue = int(value, base=10)
        except ValueError:
            return False

        return self.min_val <= ivalue <= self.max_val

    @classmethod
    def parser(cls, *, debug: bool, **_kwargs) -> pp.ParserElement:
        return (
            pp.Literal("line").set_parse_action(
                lambda s, l, _t: cls(pp.lineno(l, s)) if debug else cls(0)
            )
            ^ pp.Literal("nextline").set_parse_action(
                lambda s, l, _t: cls(pp.lineno(l, s) + 1) if debug else cls(0)
            )
            ^ pp.Literal("lineornext").set_parse_action(
                lambda s, l, _t: cls(pp.lineno(l, s), plus=1) if debug else cls(0)
            )
        )


def dict_to_attrs(d: collections.abc.Mapping[str, typing.Any], *, r: bool = False) -> list[str]:
    return [f"{k}={repr(v) if r else v}" for k, v in d.items()]


class Tag:
    def __init__(
        self,
        tag: str,
        attrs: collections.abc.Mapping[str, ValueLike],
        children: collections.abc.Iterable["Tag"],
        *,
        match_multiple: bool = False,
        match_none: bool = False,
        allow_extra_children: bool = False,
        line_bounds: tuple[int, int],
    ):
        self.tag = tag
        self.attrs = attrs
        self.children = tuple(children)
        self.allow_extra_children = allow_extra_children
        self.line_bounds = line_bounds
        self.match_multiple = match_multiple
        self.match_none = match_none

    def __str__(self) -> str:
        bits = [
            self.tag
            + {(False, False): "", (False, True): "?", (True, False): "+", (True, True): "*"}[
                self.match_multiple, self.match_none
            ]
        ]
        bits.extend(dict_to_attrs(self.attrs))
        if self.allow_extra_children:
            bits.append("<*>*")
        return "<" + " ".join(bits) + ">"

    class MatchFailureError(Exception):
        def __init__(self, msg: str):
            super().__init__("Uncaught MatchFailureError exception!")
            self.msg = msg

    def match(self, elem: XmlET.Element) -> str | None:
        if not self._matches_root(elem):
            return f"Root tag failed to match: <{elem.tag} {elem.attrib}> does not match {self}"

        try:
            self._match_children(elem)
            return None
        except self.MatchFailureError as e:
            return e.msg

    def _matches_root(
        self, elem: XmlET.Element, *, par_bounds: tuple[int, int] | None = None
    ) -> bool:
        return (
            elem.tag == self.tag
            and all(k in self.attrs for k in elem.keys())
            and all(
                v.as_value(bounds=self.line_bounds, par_bounds=par_bounds).matches(elem.get(k, ""))
                for k, v in self.attrs.items()
            )
        )

    def _match_children(self, elem: XmlET.Element, path: str | None = None) -> None:
        path = (
            path + "/" if path is not None else ""
        ) + f"{self.tag}({self.line_bounds[0]}-{self.line_bounds[1]})"

        remaining = list(elem)
        for m_none in (False, True):
            for m_multi in (False, True):
                for child in self.children:
                    if (
                        bool(child.match_none) is not m_none
                        or bool(child.match_multiple) is not m_multi
                    ):
                        continue

                    matches = [
                        e for e in remaining if child._matches_root(e, par_bounds=self.line_bounds)
                    ]
                    if len(matches) == 0 and not child.match_none:
                        msg = "\n".join(
                            [
                                f"{path}: Did not find match for {child} ({child.line_bounds[0]}-{child.line_bounds[1]}) in:"
                            ]
                            + [
                                f"  - <{e.tag} {' '.join(dict_to_attrs(e.attrib, r=True))}>"
                                for e in remaining
                            ]
                        )
                        raise self.MatchFailureError(msg)
                    if len(matches) > 1 and not child.match_multiple:
                        msg = "\n".join(
                            [
                                f"{path}: Found multiple matches for {child} ({child.line_bounds[0]}-{child.line_bounds[1]}):"
                            ]
                            + [
                                f"  - <{e.tag} {' '.join(dict_to_attrs(e.attrib, r=True))}>"
                                for e in matches
                            ]
                        )
                        raise self.MatchFailureError(msg)

                    for e in matches:
                        remaining.remove(e)
                        child._match_children(e, path)

        if remaining and not self.allow_extra_children:
            msg = "\n".join(
                [f"{path}: Some children were not matched:"]
                + [f"  - <{e.tag} {' '.join(dict_to_attrs(e.attrib, r=True))}>" for e in remaining]
            )
            raise self.MatchFailureError(msg)

    @classmethod
    def predefined_parser(cls) -> pp.ParserElement:
        return pp.Combine(pp.Literal("!") + pp.CharsNotIn(string.whitespace)("name")).set_name(
            "macro"
        )

    @classmethod
    def parser(
        cls, predefined_parser: pp.ParserElement, *, debug: bool, file: str, binary: str
    ) -> pp.ParserElement:
        mode = (
            pp.Literal("?").set_parse_action(lambda: (False, True))
            | pp.Literal("*").set_parse_action(lambda: (True, True))
            | pp.Literal("+").set_parse_action(lambda: (True, False))
            | pp.Empty().set_parse_action(lambda: (False, False))
        ).set_name("mode")
        attrs = pp.Group(
            pp.Combine(
                pp.Word(pp.alphas + "_-")("key")
                + "="
                + Value.parser(file=file, binary=binary, debug=debug)("value")
            )
        ).set_name("attribute")[...]

        @attrs.set_parse_action
        def lift_attrs(toks: pp.ParseResults) -> dict[str, Value]:
            return {a.key: a.value for a in toks}

        dbg_prefix = pp.Opt(pp.Literal("dbg:")("debugonly") | pp.Literal("nodbg:")("nodebugonly"))

        shorthand_tag = (
            pp.Combine(dbg_prefix + "<" + pp.Word(pp.alphas)("tag") + "/" + mode("mode"))
        ).set_name("short-tag") - attrs("attrs")

        @shorthand_tag.set_parse_action
        def lift_shorthand(s: str, loc: int, toks: pp.ParseResults) -> list[Tag]:
            if (toks.debugonly and not debug) or (toks.nodebugonly and debug):
                return []
            m_multi, m_none = toks.mode
            lineno = pp.lineno(loc, s)
            return [
                cls(
                    toks.tag,
                    toks.attrs,
                    match_multiple=m_multi,
                    match_none=m_none,
                    line_bounds=(lineno, lineno),
                    children=[],
                )
            ]

        lineno = pp.Empty()

        @lineno.set_parse_action
        def get_lineno(s: str, loc: int, _toks: pp.ParseResults) -> int:
            return pp.lineno(loc, s)

        open_tag = pp.Combine(
            dbg_prefix + "<" + pp.Word(pp.alphas)("opentag") + mode("mode")
        ).set_name("tag-open")
        close_tag = pp.Combine("</" + pp.Word(pp.alphas)("closetag") + lineno("clineno")).set_name(
            "tag-close"
        )

        tag = pp.Forward()
        paired_tag = (
            open_tag
            - attrs("attrs")
            - pp.Opt("<*>*")("unmatched")
            - tag[...]("children")
            - close_tag
        )

        @paired_tag.set_parse_action
        def lift(s: str, loc: int, toks: pp.ParseResults) -> list[Tag]:
            if (toks.debugonly and not debug) or (toks.nodebugonly and debug):
                return list(toks.children)
            if toks.opentag != toks.closetag:
                raise ValueError(
                    f"Tag <{toks.opentag} was closed with </{toks.closetag} (line: {toks.clineno:d})"
                )
            m_multi, m_none = toks.mode
            lineno = pp.lineno(loc, s)
            return [
                cls(
                    toks.opentag,
                    toks.attrs,
                    match_multiple=m_multi,
                    match_none=m_none,
                    allow_extra_children=bool(toks.unmatched),
                    line_bounds=(lineno, toks.clineno),
                    children=toks.children,
                )
            ]

        tag <<= predefined_parser | shorthand_tag | paired_tag
        return tag


def parse_sources(sources: collections.abc.Iterable[Path], *, debug: bool, binary: str) -> Tag:
    definitions: dict[str, list[Tag]] = {}
    def_parser = Tag.predefined_parser()

    @def_parser.set_parse_action
    def expand(toks: pp.ParseResults) -> list[Tag]:
        return definitions[toks.name]

    result: Tag | None = None
    for source in sources:
        file = source.resolve(strict=True).as_posix()
        parser = Tag.parser(def_parser, file=file, binary=binary, debug=debug)

        macros: dict[str, str] = {}
        lines: list[str] = []
        in_def: tuple[str, list[str]] | None = None
        with open(source, encoding="utf-8") as f:
            for line in f:
                lines.append("")
                if in_def is not None:
                    in_def[1].append("")

                mat = re.search(r"\b(CHECK|DECLARE|DEFINE|ENDDEFINE):\s+(.+)", line)
                if not mat:
                    continue
                match mat[1]:
                    case "DECLARE":
                        bits = mat[2].split(maxsplit=1)
                        name = bits[0]
                        value = bits[1]
                        if not name.startswith("!!"):
                            raise ValueError("DECLARE macros must start with '!!'")
                        macros[name[2:]] = value
                    case "DEFINE":
                        if in_def is not None:
                            raise ValueError("Nested DEFINEs not allowed")
                        if not mat[2].startswith("!"):
                            raise ValueError("DEFINE subcheck names must start with '!'")
                        in_def = (mat[2][1:].strip(), [""] * len(lines))
                        if re.search(r"\s", in_def[0]):
                            raise ValueError("DEFINE subcheck names must not contain spaces")
                        if in_def[0] in definitions:
                            raise ValueError(f"Attempt to re-DEFINE macro !{in_def[0]}")
                    case "ENDDEFINE":
                        if in_def is None:
                            raise ValueError("ENDDEFINE without a prior DEFINE")
                        if not mat[2].startswith("!") or in_def[0] != mat[2][1:].strip():
                            raise ValueError(
                                f"Mismatched ENDDEFINE for macro !{in_def[0]}, got {mat[2].strip()}"
                            )
                        definitions[in_def[0]] = list(
                            parser.parse_string("\n".join(in_def[1]), parse_all=True)
                        )
                        in_def = None
                    case "CHECK":
                        expr = re.sub(
                            r"!!(\S+)",
                            lambda m: macros[m[1]],  # pylint: disable=cell-var-from-loop
                            mat[2],
                        )
                        (in_def[1] if in_def is not None else lines)[-1] = " " * mat.start(2) + expr
                    case _:
                        raise AssertionError

        if in_def is not None:
            raise ValueError(f"Missing ENDDEFINE for !{in_def[0]} at EOF")
        if any(not l.isspace() for l in lines):
            if result is not None:
                raise ValueError("Only one file may define the top-level tag")
            result = parser.parse_string("\n".join(lines), parse_all=True)[0]

    if result is None:
        raise ValueError("No nonempty CHECK directives gathered from input")
    return result


@click.command()
@click.option(
    "--from",
    "sources",
    multiple=True,
    type=click.Path(exists=True, readable=True, dir_okay=False, path_type=Path),
    help="Input source to match Structfiles against",
)
@click.option(
    "--debugless",
    is_flag=True,
    help="Disable any matching that would rely on the presence of debug info",
)
@click.argument(
    "binary", type=click.Path(exists=True, readable=True, dir_okay=False, path_type=Path)
)
def test_lexical_structure(sources: tuple[Path], debugless: bool, binary: Path):
    """Test that analysis generates an appropriate structure for BINARY based on directives listed
    in the input sources.
    """

    try:
        tag = parse_sources(sources, debug=not debugless, binary=str(binary.resolve(strict=True)))
    except pp.ParseException as e:
        raise click.ClickException("Pattern syntax error:\n" + e.explain())
    except pp.ParseFatalException as e:
        raise click.ClickException("Pattern syntax error:\n" + e.explain())

    with hpcstruct(binary) as structfile:
        data = XmlET.parse(structfile)
        found = False
        for lm in data.findall("LM"):
            found = True
            msg = tag.match(lm)
            if msg is not None:
                raise click.ClickException(msg)
        if not found:
            raise click.ClickException("Missing <LM> tag?")


if __name__ == "__main__":
    test_lexical_structure()  # pylint: disable=no-value-for-parameter
